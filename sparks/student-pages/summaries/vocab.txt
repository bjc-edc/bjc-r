		<div class="vocabFullWidth"><!--<strong> 1.1.1: Reporters</strong> and <strong>Inputs</strong>-->

			<ul>

    			<li>

					<strong>Reporters: </strong> There are several kinds of blocks in Snap<em>!</em>. The <code>say hello</code> block is a <strong>reporter</strong> block. Reporters do a computation and then "report" the result. For example, the result of running the reporter block below is the text "olá Ana" shown in the bubble beside it.<br />

					<img class="indent" src="/bjc-r/sparks/img/U1/lab01/say-hello-with-inputs-reporting.png" alt="say hello to ('Ana') in ('Portuguese') reporting 'olá Ana'" title="say hello to ('Ana') in ('Portuguese') reporting 'olá Ana'" /><br />

				</li>

				<li><strong>Inputs:</strong> Many blocks, like <code>say hello</code>, accept <strong>inputs</strong> that customize what they do. Inputs appear as spaces you can edit. The <code>say hello</code> block accepts two inputs: a name and a language. As you've seen, changing the inputs to a reporter can change the output it reports.</li>

			</ul>

		</div>
 

		<div class="vocabFullWidth"><strong> 1.2.2: Abstraction</strong>

			<div class="commentBig"><p>Will they be watching a video on abstraction here? Or does Dan mention it in welcome? It feels so..abstract..here that I wonder what students will take from it. If I wasn't bound to use the term abstraction, I'd probably emphasize the benefit of reuse "When we realize we've developed a useful piece of functionality that we might want to use in other places, we can turn it into its own block." Anyway just musings from your local "abstraction" skeptic, feel free to delete. -- PF 8/20/21</p><p>I added your text at the beginning and am open to a Dan video and/or more discussion about teaching abstraction. :) --MF, 8/20/21</p></div>
 

		<div class="vocabFullWidth"><strong> 1.2.3: Local Variables</strong>

		  <p>Block inputs (such as <var>feeling</var>,  <var>job</var>, <var>action 1</var>, <var>place</var>, <var>action 2</var>, etc., in the <code>super short story</code> example) are called <strong>local variables</strong> because the value they report to <code>join words</code> <em>varies</em> based on what is typed into the input slots of <code>super short story</code>, but they only can be used in this <em>local</em> context (you can't drag them out of the block editor and expect them to work in other parts of your code).</p>

		  <div class="todo">Should this mention that block/script local is different from sprite local? -bh 2/6/22</div>
 

				<div class="vocabFullWidth">

					<p>A <strong>list</strong> is an ordered sequence of items.<div class="todo">PLEASE don't interrupt experiments with huge vocabulary lessons. The language "reports a list" is sufficient context to make clear what a list is. And anyway, kids already know. They've seen the lists you show here and before that they've seen shopping lists. The fact that a list, in this context  is "an ordered sequence" (unlike a shopping list) is true and important but can be taken for granted. Kids want to experiment and the last two items in this activity are potentially fun and interesting. Making vocabulary a priority just guarantees that it will become the focus of the course, will be tested, and will kill any semblance of B and J that is left. --PG </div></p>
 

		<div class="vocabFullWidth"><strong> 1.4.3: Sprites</strong> and <strong>Costumes</strong>

			<p>

				A <strong>sprite</strong> is an object that has scripts and a costume and can even move around on the stage.

				<div class="endnote">

					<div class="todo">Mary, this image still needs an update. --MF, 9/13/21</div>
 

		<div class="vocabFullWidth"> 1.4.3: <strong>Table</strong>



	</body>

</html>
 

		<div class="vocabFullWidth"> 1.4.4: <strong>Abstraction</strong>

			<p>Hiding the details of <em>how</em> <code>color from pixel</code> selects the correct RGB value from a pixel (so you don't have to see the extra <code>item of</code> block) is a form of <strong>abstraction</strong>.</p>

		</div>
 

		<div class="vocabFullWidth"> 1.4.4: <strong>Higher-Order Function</strong>

							<div class="todo">Image needs to be updated. --MF, 9/13/21</div>
 

		<div class="vocabFullWidth"><strong> 1.5.1: Decimal Numerals</strong>

			<p>A <strong>decimal numeral</strong> is part of the base 10 system, the system we learn by counting on ten fingers.</p>

			<p>In base 10, there are ten digits (0-9), and each place is worth ten times as much as the place to its right.</p>

			<div class="endnote">

				<p><a href="#hint-number-239" data-toggle="collapse" title="For example, consider the number 239...">For example, consider the number 239...</a></p>

				<div id="hint-number-239" class="collapse">

					<div class="indent bordered-table three-col" style="width:300px;">

						<div>2</div>
 


 

		<div class="vocabFullWidth"><strong> 1.5.3: Hexadecimal Numerals</strong>

			<div class="sidenoteBig">

				The letters A-F are used for the values 10-15:

				<table class="byte indent" summary="values of hex digits A-F">

                    <tr>

                        <th scope="col" style="font-weight:normal;">10</th>

                        <th scope="col" style="font-weight:normal;">11</th>

                        <th scope="col" style="font-weight:normal;">12</th>

                        <th scope="col" style="font-weight:normal;">13</th>

                        <th scope="col" style="font-weight:normal;">14</th>

                        <th scope="col" style="font-weight:normal;">15</th>

                    </tr>

                    <tr>

                        <td>A</td>

                        <td>B</td>

                        <td>C</td>

                        <td>D</td>

                        <td>E</td>

                        <td>F</td>

                    </tr>

                </table>

			</div>
 

		<div class="vocabFullWidth">

			<ul>

				<li><strong>Encryption</strong> is the process of encoding data to prevent unauthorized access.</li>

				<li><strong>Decryption</strong> is the process of decoding encrypted data. </li>

			</ul>

		</div>
 

		<div class="vocabFullWidth"><strong> 1.6.2: Predicate</strong> and <strong>Conditional</strong>

			<p>

                A <strong>predicate</strong> is a hexagon-shaped reporter that asks a true/false question such as these examples:<br />

                <img class="indent" src="/bjc-r/img/2-complexity/8-gt-7-reporting-true.png" alt="8 > 7 reporting true" title="8 > 7 reporting true" />

                <img class="indent" src="/bjc-r/img/2-complexity/6-gt-7-reporting-false.png" alt="6 > 7 reporting false" title="6 > 7 reporting false" />

            </p>

			<p>

				A <strong>conditional</strong> is a block that controls the code based on a true/false condition (the predicate). The <img class="inline nopadtb" src="/bjc-r/img/blocks/reporter-if.png" alt="if 'predicate input slot' then () else ()" title="if 'predicate input slot' then () else ()" /> block is an example of a conditional.

			</p>

		</div>
 

		<div class="vocabFullWidth"><strong> 1.6.2: Predicate</strong> and <strong>Conditional</strong>

			<p>

                A <strong>predicate</strong> is a hexagon-shaped reporter that asks a true/false question such as these examples:<br />

                <img class="indent" src="/bjc-r/img/2-complexity/8-gt-7-reporting-true.png" alt="8 > 7 reporting true" title="8 > 7 reporting true" />

                <img class="indent" src="/bjc-r/img/2-complexity/6-gt-7-reporting-false.png" alt="6 > 7 reporting false" title="6 > 7 reporting false" />

            </p>

			<p>

				A <strong>conditional</strong> is a block that controls the code based on a true/false condition (the predicate). The <img class="inline nopadtb" src="/bjc-r/img/blocks/reporter-if.png" alt="if 'predicate input slot' then () else ()" title="if 'predicate input slot' then () else ()" /> block is an example of a conditional.

			</p>

		</div>
 

