1-introduction/3-drawing/1-exploring-motion.html:                    <strong>Color families.</strong>  Click the file menu icon and select "Libraries..."  Then, find the "Colors and Crayons" library and click "Import."<br />
1-introduction/3-drawing/1-exploring-motion.html:                    <img class="indent" src="/bjc-r/img/1-introduction/libs.png" alt='Snap! file menu, highlighting "Libraries..."' title='Snap! file menu, highlighting "Libraries..."' />
1-introduction/3-drawing/1-exploring-motion.html:                    <img class="indent" src="/bjc-r/img/1-introduction/color-lib.png" height="350px" alt='Import library dialog box with "Colors and Crayons" library highlighted' title='Import library dialog box with "Colors and Crayons" library highlighted' /><br />
1-introduction/3-drawing/1-exploring-motion.html:                    In the Pen menu you'll find the <code>set pen to crayon</code> block.  Computers can display billions of colors, but unless you have to match the paint on your wall very precisely, finding your way through all those colors may be more trouble than it's worth.  The crayon library, just like a box of crayons, gives you a small set of vibrant colors, arranged in families.  So if you want a lot of browns in your picture, you could pick a random number between 30 and 39.<br />
1-introduction/3-drawing/2-exploring-snap-drawing-motion.html:							<span>Gamal:</span> Hey! Gang! Remember we imported that crayon library?  Guess what!  There's a "World Map" library, too!  And it makes "watercolor" maps like this:<br />
2-complexity/4-making-computers-do-math/1-mod-operator.html:                <li><div class="newProject inline"><span class="text">"U2L4-MathLibrary"</span><img src="/bjc-r/img/icons/new-project-called.png" alt="Start a New Project called U2L4-MathLibrary" title="Start a New Project called U2L4-MathLibrary" /></div></li>
2-complexity/4-making-computers-do-math/2-math-predicates.html:		<h2>Making a Mathematical Library</h2>
2-complexity/4-making-computers-do-math/2-math-predicates.html:        <div class="learn"><strong>In this project</strong>, you will create a <em>library</em> (a collection) of math tools that builds on the blocks you created in <a href="/bjc-r/cur/programming/2-complexity/3-predicates/2-combining-predicates.html?topic=nyc_bjc%2F2-conditionals-abstraction.topic&course=bjc4nyc.html&novideo&noassignment" title="Lab 3 Page 2: Combining Predicates">Lab 3 Page 2: Combining Predicates</a>.</div>
2-complexity/4-making-computers-do-math/2-math-predicates.html:            <p>A <strong>software library</strong> is a collection of procedures that can be used in  programs.</p>
2-complexity/4-making-computers-do-math/2-math-predicates.html:        <p>Using <em>libraries</em> simplifies the development of new programs. When you use procedures that you already know work correctly, you reduce the amount of time you need to spend coding, the number of possible bugs your code can have, and how much of your project you need to test.</p>
2-complexity/4-making-computers-do-math/2-math-predicates.html:                            <div class="sidenoteBig">Snap<em>!</em> libraries and Snap<em>!</em> projects are both exported as XML files.</div>
2-complexity/4-making-computers-do-math/2-math-predicates.html:                    Import these blocks into your U2L4-MathLibrary project, test them and resolve any issues, and save.
2-complexity/4-making-computers-do-math/2-math-predicates.html:                            <li><strong>Open the Snap<em>!</em> project</strong> into which you want to import blocks. (In this case, your U2L4-MathLibrary project.)</li>
2-complexity/4-making-computers-do-math/2-math-predicates.html:            You are creating a math library. Snap<em>!</em> has libraries for many things, such as one for accessing different parts of words and sentences...<br />
2-complexity/4-making-computers-do-math/2-math-predicates.html:            <img class="indent" src="/bjc-r/img/6-computers/libraries-1.png" alt="Snap! File menu opened with cursor over 'Libraries'" title="Snap! File menu opened with cursor over 'Libraries'" />
2-complexity/4-making-computers-do-math/2-math-predicates.html:            <img class="indent" src="/bjc-r/img/6-computers/libraries-words.png" alt="Snap! 'Import library' dialog box highlighting 'Words, sentences' library" title="Snap! 'Import library' dialog box highlighting 'Words, sentences' library" />
2-complexity/4-making-computers-do-math/2-math-predicates.html:                    Copy and modify the code from your <code>even?</code> predicate to develop an <code>odd?</code> predicate for your library.<br />
2-complexity/4-making-computers-do-math/2-math-predicates.html:        <p>You can create algorithms from scratch or by combining or modifying existing algorithms. When you are thinking of using existing code, you can either use your own code or use code from someone else's library.</p>
2-complexity/4-making-computers-do-math/2-math-predicates.html:        <p>You've now made a small library, and you might want to write a list of instructions for how to use the functions in your library (for example, <code>divisors of</code> takes a positive integer as input and reports a list of numbers). The instructions form an <em>Application Program Interface</em> for the library.</p>
2-complexity/4-making-computers-do-math/2-math-predicates.html:            <p>An <strong>application program interface (API)</strong> documents what a programmer needs to know about using a library: it's a description of each procedure's purpose, inputs, and outputs (but not its algorithms).</p>
2-complexity/4-making-computers-do-math/2-math-predicates.html:                    <p>A common kind of API is a <em>web API</em> in which the library exists on someone else's computer. For example, the <a href="https://developers.google.com/maps/documentation/embed/start" title="Google Maps API" target="_blank">Google Maps API</a> describes how to embed a Google Map on your own website.</p>
2-complexity/4-making-computers-do-math/3-other-math-reporters.html:				<li>Open your U2L4-MathLibrary project if it isn't open already.</li>
2-complexity/4-making-computers-do-math/3-other-math-reporters.html:        <p><code>Average of list</code> and <code>sum of list</code> are procedures that you'll need repeatedly, so after a while, you just know how to write them, or you'll put them in a library, and you won't have to reinvent them each time. Finding the maximum or minimum value in a list and checking for divisibility are also commonly needed algorithms.</p>
2-complexity/5-copyrights/5-drm.html:            <div id="hint-exemptions" class="collapse">Temporary exemptions to the anti-circumvention part of the DMCA can be made by the Librarian of Congress for a three-year period (a surprising choice, since the Library of Congress previously wasn't involved in judging copyright issues), but any such exemption must be renewed by the Librarian every three years. Most such exemptions are made for technical reasons (e.g., to allow one piece of equipment to work with another piece of equipment from a different manufacturer), but there was great excitement in 2010 when the Librarian of Congress allowed people to jailbreak their cell phones.</div>
3-lists/1-abstraction/4-brick-wall.html:                        You might want to use the <code>odd?</code> predicate from  your U2L4-MathLibrary. You learned about exporting and importing blocks on <a href="/bjc-r/cur/programming/2-complexity/3-predicates/1-what-is-predicate.html?topic=nyc_bjc%2F2-conditionals-abstraction.topic&course=bjc4nyc.html&novideo&noassignment" title="What's a Predicate?">Unit 2 Lab 3 Page 1: What's a Predicate?</a>
3-lists/1-abstraction/6-debugging-recap.html:                    The <strong>"Unused blocks..."</strong> option in the Snap<em>!</em> File menu will eliminate blocks you no longer need. This is often useful when you've loaded a library but you only need one or two blocks from the library.
3-lists/2-contact-list/4-looking-up-data.html:                    Make a block to sort the contact list.  To do the actual sorting, you can load the "List utilities" library.  It has a block
4-internet/2-cybersecurity/2-caesar-cipher.html:                                        <li>If you want to use Unicode, you'll probably want to build or import a block like <code>is between?</code> from your U2L4-MathLibrary project to check which Unicode values are capital letters. (You learned about exporting and importing blocks on <a href="/bjc-r/cur/programming/2-complexity/4-making-computers-do-math/2-math-predicates.html?topic=nyc_bjc%2F2-conditionals-abstraction.topic&course=bjc4nyc.html&novideo&noassignment" title="Unit 2 Lab 4 Page 2: Making a Mathematical Library">Unit 2 Lab 4 Page 2: Making a Mathematical Library</a>.)</li>
4-internet/4-representation-compression/3-representing-numbers.html:                <div class="sidenoteBig">You can use bignums in any Snap<em>!</em> project by importing the "Infinite precision integers, exact rationals, complex" library. <div class="todo"><p>You learned to import libraries on the <a href="/bjc-r/cur/programming/6-computers/1-abstraction/04-software-libraries.html?topic=nyc_bjc%2F6-how-computers-work.topic&course=bjc4nyc.html&novideo&noassignment" title="The Software Domain: Libraries">Libraries</a> page.</p> They did not. --MF, 6/13/19</div></div>
5-algorithms/3-turning-data-information/1-health-data.html:                    Looking at clusters in the data can help you gain insight and knowledge. <strong>Do some research</strong> online or in the library to help you answer the following:
5-algorithms/3-turning-data-information/4-filtering-data.html:                        You can use the <code>pipe</code> function from the "Bar Charts" library to work through your data analysis one function at at time:<br />
5-algorithms/3-turning-data-information/4-filtering-data.html:                        <p>You learned about loading libraries and exporting/importing blocks on <a href="/bjc-r/cur/programming/2-complexity/4-making-computers-do-math/2-math-predicates.html?topic=nyc_bjc%2F2-conditionals-abstraction.topic&course=bjc4nyc.html&novideo&noassignment" title="Unit 2 Lab 4 Page 2: Making a Mathematical Library">Unit 2 Lab 4 Page 2: Making a Mathematical Library</a>.</p>
5-algorithms/3-turning-data-information/4-filtering-data.html:                        <li>Load the "Bar Charts" library from the "Libraries..." option in the Snap<em>!</em> File menu (<img src="/bjc-r/img/1-introduction/file_button.png" style="height:1.6em;" alt="File button" title="File button"/>).</li>
6-computers/1-abstraction/01-abstraction.html:		<img class="indent noshadow" src="/bjc-r/img/6-computers/hardware-abstraction.png" alt="diagram of computer abstraction hierarchy showing three levels of decreasing abstraction: software domain (including applications, programming languages, libraries, and operating systems), digital domain (including architecture, components, integrated circuits, and logic gates), and analog domain (including transistors); there is a dividing line between the software and digital domains labeled 'program abstraction barrier' and a dividing line between the digital and analog domains labeled 'digital abstraction barrier;' there is a vertical double-headed arrow on the right indicating that the items listed first on the list (and their sub-lists) have a 'high level of abstraction' and those lower on the list have a 'low level of abstraction'" title="diagram of computer abstraction hierarchy showing three levels of decreasing abstraction: software domain (including applications, programming languages, libraries, and operating systems), digital domain (including architecture, components, integrated circuits, and logic gates), and analog domain (including transistors); there is a dividing line between the software and digital domains labeled 'program abstraction barrier' and a dividing line between the digital and analog domains labeled 'digital abstraction barrier;' there is a vertical double-headed arrow on the right indicating that the items listed first on the list (and their sub-lists) have a 'high level of abstraction' and those lower on the list have a 'low level of abstraction'" />
6-computers/1-abstraction/01-abstraction.html:                <li><strong>libraries</strong> of useful functions that hide messy details</li>
6-computers/1-abstraction/03-software-languages.html:				<p>Application programmers don't often decide "I'm going to write this program in a low level language." They may simply not realize that higher levels of abstraction are possible. For example, a computer's hardware limits the size of numbers that its arithmetic unit can add in a single step. Four billion—about ten digits—is a common size limit for integers. Programmers who use Java, JavaScript, Python, C or C++ may think that this limit is unavoidable. But programmers who use really high level languages, such as Scheme or Common Lisp, know that they can do arithmetic on numbers with millions or billions of digits, limited only by the size of the computer's memory. As you will see later, Snap! has a library that lets it do this, too.</p>
6-computers/1-abstraction/04-software-libraries.html:        <h2>The Software Domain: Libraries</h2>
6-computers/1-abstraction/04-software-libraries.html:            <p>After pulling stuff into <a href="/bjc-r/cur/programming/2-complexity/4-making-computers-do-math/2-math-predicates.html?topic=nyc_bjc%2F2-conditionals-abstraction.topic&course=bjc4nyc.html&novideo&noassignment" title="Unit 2 Lab 4 Page 2: Making a Mathematical Library">Unit 2 Lab 4 Page 2: Making a Mathematical Library</a> for the standards, I commented out that redundant content here. --MF, 8/28/19</p>   
6-computers/1-abstraction/04-software-libraries.html:        <div class="learn"><strong>On this page</strong>, you'll learn that a library is a package of procedures written by other programmers that helps solve a problem.</div>
6-computers/1-abstraction/04-software-libraries.html:        <p>Other common tasks (such as knowing where the mouse pointer is, doing arithmetic on huge numbers, or managing sound) also have complex parts. If programmers had to deal with all of these details in every program, no software would ever get developed. And because many applications need the same abilities, programmers write <em>libraries</em> for other programmers to use.</p> 
6-computers/1-abstraction/04-software-libraries.html:		<div class="vocabFullWidth">: <strong>Software Libraries</strong><!-- and <strong>APIs</strong>-->
6-computers/1-abstraction/04-software-libraries.html:                <li>A <strong>software library</strong> is a package of procedures that you can import into your program. A library is a kind of abstraction: you don't have to know any of the details of how it's coded. You can build libraries yourself, or you can use one that someone else wrote.</li>
6-computers/1-abstraction/04-software-libraries.html:                <li>An <strong>application program interface (API)</strong> documents what the user of a library needs to know about it: it's a description of each procedure's purpose, inputs, and outputs (but not its algorithms).</li>-->
6-computers/1-abstraction/04-software-libraries.html:            <p>A common kind of API is a <em>web API</em> in which the library exists on someone else's computer. For example, the <a href="https://developers.google.com/maps/documentation/embed/start" title="Google Maps API" target="_blank">Google Maps API</a> describes how to embed a Google Map on your own website.</p>
6-computers/1-abstraction/04-software-libraries.html:        <h3>Languages vs. Libraries</h3>
6-computers/1-abstraction/04-software-libraries.html:        <p>Often when people compare what different programming languages can do, they are <em>really</em> comparing libraries. For example, people may think they like JavaScript because they can use it to program web pages, but that's not a property of JavaScript. It's actually a web page <em>library</em> built into the browser that lets you program web pages.</p>
6-computers/1-abstraction/04-software-libraries.html:        <h3>Libraries in Snap<em>!</em></h3>
6-computers/1-abstraction/04-software-libraries.html:        <!--<div class="todo">Both of these references have now been changed. See <a href="/bjc-r/cur/programming/5-algorithms/3-turning-data-information/4-filtering-data.html?topic=nyc_bjc%2F5-algorithms.topic&course=bjc4nyc.html&novideo&noassignment">5.3.4</a> for <code>pipe</code> and the RGB/HSV library has been cut from 4.5.8. --MF, 8/15/19</div>-->
6-computers/1-abstraction/04-software-libraries.html:            You've used libraries in Snap<em>!</em>. For example, when you imported the "Bar Charts" library in <a href="/bjc-r/cur/programming/5-algorithms/3-turning-data-information/4-filtering-data.html?topic=nyc_bjc%2F5-algorithms.topic&course=bjc4nyc.html&novideo&noassignment" title="Unit 5 Lab 3 Page 4: Analyzing Data">Unit 5 Lab 3 Page 4: Analyzing Data</a>.<!--<a href="/bjc-r/cur/programming/2-complexity/4-making-computers-do-math/2-math-predicates.html?topic=nyc_bjc%2F2-conditionals-abstraction.topic&course=bjc4nyc.html&novideo&noassignment" title="Unit 2 Lab 4 Page 1: Mathematical Predicates">Unit 2 Lab 4 Page 1: Mathematical Predicates</a> or the "Set RGB or HSV pen color" Library in <a href="/bjc-r/cur/programming/4-internet/5-representation-compression/6-compression.html?topic=nyc_bjc%2F4-internet.topic&course=bjc4nyc.html&novideo&noassignment" title="Unit 4 Lab 5 Page 8: Data Compression">Unit 4 Lab 5 Page 8: Data Compression</a>, you were importing a library of additional procedures including <code>set pen color</code> and <code>pipe</code>. Snap<em>!</em> also has libraries for many other things, such as one for accessing different parts of words and sentences.<br />
6-computers/1-abstraction/04-software-libraries.html:            <div class="todo">This image of the libraries list is out of date. It seems like it always will be. Does it matter? --MF, 8/6/19</div>
6-computers/1-abstraction/04-software-libraries.html:            <img class="indent" src="/bjc-r/img/6-computers/libraries-1.png" alt="Snap! File menu opened with cursor over 'Libraries'" title="Snap! File menu opened with cursor over 'Libraries'" />
6-computers/1-abstraction/04-software-libraries.html:            <img class="indent" src="/bjc-r/img/6-computers/libraries-words.png" alt="Snap! 'Import library' dialog box highlighting 'Words, sentences' library" title="Snap! 'Import library' dialog box highlighting 'Words, sentences' library" />-->
6-computers/1-abstraction/04-software-libraries.html:				<li>Read through the libraries listed in Snap<em>!</em> (as shown above), and choose one block that interests you and that you have never used. Build a small project that uses that block, and use your project to teach that block to some of your classmates.</li>
6-computers/1-abstraction/06-digital-architecture.html:                    	<small>Image by Alfred Edward Chalon, Science &amp; Society Picture Library, Public Domain, via Wikimedia.</small>
6-computers/1-abstraction/06-digital-architecture.html:                                            <strong>EEPROM</strong> (512 Bytes–4kBytes) is non-volatile, and is used for very long term data, like a file in a computer's disk, except that there is only a tiny amount available. Programs on the Arduino have to ask explicitly to use this memory, with an EEPROM library.
6-computers/1-abstraction/09-digital-logic-gates.html:            <img class="indent noshadow" src="/bjc-r/img/6-computers/hardware-abstraction.png" alt="diagram of computer abstraction hierarchy showing three levels of decreasing abstraction: software domain (including applications, programming languages, libraries, and operating systems), digital domain (including architecture, components, integrated circuits, and logic gates), and analog domain (including transistors); there is a dividing line between the software and digital domains labeled 'program abstraction barrier' and a dividing line between the digital and analog domains labeled 'digital abstraction barrier;' there is a vertical double-headed arrow on the right indicating that the items listed first on the list (and their sub-lists) have a 'high level of abstraction' and those lower on the list have a 'low level of abstraction'" title="diagram of computer abstraction hierarchy showing three levels of decreasing abstraction: software domain (including applications, programming languages, libraries, and operating systems), digital domain (including architecture, components, integrated circuits, and logic gates), and analog domain (including transistors); there is a dividing line between the software and digital domains labeled 'program abstraction barrier' and a dividing line between the digital and analog domains labeled 'digital abstraction barrier;' there is a vertical double-headed arrow on the right indicating that the items listed first on the list (and their sub-lists) have a 'high level of abstraction' and those lower on the list have a 'low level of abstraction'" />
6-computers/2-history-impact/1-timeline.html:                                <small>Image by Alfred Edward Chalon, Science &amp; Society Picture Library, Public Domain, via Wikimedia.</small>
8-recursive-reporters/1-recursive-reporters/2-writing-recursive-reporters.html:            <p>PG: The controversy in the notes on the page is about good examples. We have an earlier controversy to deal with. Why are we teaching recursion at all?! /MY/ answer to that would be that it is a powerful IDEA, intellectually interesting, and related to some natural ways of thinking but more formalized (that is, making those already natural ways explicit). I emphasized IDEA, to distinguish from TECHNIQUE. Virtually everything, including letter count, can be done with more abbreviated code, if we build the appropriate tools first.  LENGTH OF (LIST TO SENTENCE (list))  This does get to one of my total confusions about controversies about Snap, itself. Why are MAP, KEEP, and COMBINE in a library as opposed to in the language?  Just to illustrate that it's possible to create them in Snap? Seems like the wrong way to advertise Snap's power. This feels like the same issue we're facing in our discussion of when/how to teach recursion. If we have to defend WHY to teach recursion only on its suitability as a technique for a particular problem, I think we're done in. The problems it is needed for are either already solved or too hard for our kids. Let's start with small problems that make great sense to think of recursively, even if someone else has already written the tool that saves us from having to do that.  LETTER COUNT is fine. So is n^m. Factorial is also fine but less familiar than n^m. (Typically n^m is sixth or seventh grade; factorial is high school.) Looking through a list for an item (yes, exactly what CONTAINS does), UNIQUING a list....  An advantage is that these are all different applications with very similar structures, so kids are /learning how to do it/ rather than getting lots of different lessons and not learning anything well.</p>
8-recursive-reporters/1-recursive-reporters/2-writing-recursive-reporters.html:                    <p>As noted in email, I don't think <code>letter count</code> is an exception, as Mary does. But more important, I don't think students can easily compare their <code>my join words</code> with the <code>join words</code> in the tools library, because the latter is variadic, taking multiple strings as inputs rather than taking one single list of strings. As a result, its code uses the sort of hidden and obscure &quot;input list&quot; feature of Snap<em>!</em>, which we haven't taught and I'd rather avoid teaching, at least in the middle of teaching other hard stuff. --bh
8-recursive-reporters/3-subsets/2-subsets.html:                            <p>From the Snap<em>!</em> file menu, choose "Libraries..." at the bottom, then choose "List Utilities" to load <code>append</code> and other list operations.</p>
8-recursive-reporters/4-building-higher-order-functions/1-plurals-and-other-recursions.html:                    <div class="todo">Need to have them download "Words and Sentences" library and update the image. --MF, 6/17/20</div>
8-recursive-reporters/4-building-higher-order-functions/2-generalizing-the-map-pattern.html:        <!-- <p class="takeNote">(The version in the Snap<em>!</em> tool library is more complicated because it allows more than one input list. The actual code is kind of messy—not mysterious, just messy. It makes a single list a special case, which it then uses inside itself. There's no need for you to read it, but feel free if you don't mind mess.)</p> -->
