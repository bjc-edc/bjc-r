title: Teaching Guide for Unit 1: Functions and Data

{

h3: Purpose
	raw-html:<p>This unit starts with the basics of functional programming&mdash;creating abstractions in the form of reporters (i.e., functions) and predicates (i.e., functions that return Booleans) through control structures, to using the higher-order functions <code>map</code>, <code>keep</code>, and <code>combine</code>. Students explore the Snap<em>!</em> programing environment using functions to process inputs, which may themselves be the outputs of other functions. After learning the basics of working in Snap<em>!</em>, students create projects with using lists, sounds, and other common data types (numbers, text, emojis, etc.) as they learn the basics of bits, characters, and how functions behave.</p>
		
h3: CSTA Standards:
        raw-html:<div class="todo">These need to be updated after all the pages are finalized. --MF</div>
		raw-html:<p><ul>
		raw-html:<li><strong>2-NI-04:</strong> Model the role of protocols in transmitting data across networks and the Internet.</li>
		raw-html:<li><strong>2-DA-07:</strong> Represent data using multiple encoding schemes.</li>
		raw-html:<li><strong>2-DA-08:</strong> Collect data using computational tools and transform the data to make it more useful and reliable. <!--As students continue to build on their ability to organize and present data visually to support a claim, they will need to understand when and how to transform data for this purpose. Students should transform data to remove errors, highlight or expose relationships, and/or make it easier for computers to process. The cleaning of data is an important transformation for ensuring consistent format and reducing noise and errors (e.g., removing irrelevant responses in a survey). An example of a transformation that highlights a relationship is representing males and females as percentages of a whole instead of as individual counts.--></li>
		raw-html:<li><strong>2-AP-14:</strong> Students should create procedures and/or functions that are used multiple times within a program to repeat groups of instructions. <!--These procedures can be generalized by defining parameters that create different outputs for a wide range of inputs. For example, a procedure to draw a circle involves many instructions, but all of them can be invoked with one instruction, such as “drawCircle.” By adding a radius parameter, the user can easily draw circles of different sizes.--></li>
		raw-html:<li><strong>3A-AP-21:</strong> Evaluate and refine computational artifacts to make them more usable and accessible.</li>
		raw-html:</ul></p>
		
h3: Teacher Guides for Student Labs
        resource: Lab 1: Introduction to Snap<em>!</em> [/bjc-r/middle-school/teaching-guide/U1/01-say-hello.html]
        raw-html:<ul><li>&gt;2&ndash;4 days (75&ndash;150 minutes)</li></ul><div class="todo">We are still missing the functional version of the Marching Orders activity and that will impact this time estimate. Also, I have some reconfiguring to do with the story stuff that may result in splitting lab 1 into the intro stuff and "say hello" followed by another lab here for the Story stuff ... --MF, 7/12/21</div>
		resource: Lab 2: Dealing with Data [/bjc-r/middle-school/teaching-guide/U1/02-dealing-with-data.html]
        raw-html:<ul><li>2&ndash;4 days (75&ndash;150 minutes)</li></ul>
        resource: Lab 3: Pixel Manipulation [/bjc-r/middle-school/teaching-guide/U1/03-pixel-manipulation.html]
        raw-html:<ul><li>X&ndash;X days (X&ndash;X minutes)</li></ul><div class="todo">I need help figuring out how to handle pixels. We have this image manipulation project that I built and the library that Dan made, but how do they work together? --MF</div>
		resource: Lab 4: Storing, Securing, and Transmitting Data [/bjc-r/middle-school/teaching-guide/U1/04-storing-securing-transmitting.html]
        raw-html:<ul><li>3&ndash;9 days (110&ndash;330 minutes)</li></ul><div class="todo">This depends on whether we include the external videos</div>


        
//h3: Assessments and Solutions
    //raw-html:<div w3-include-html="/bjc-r/utilities/includes/1-solutions.txt"></div><script>w3.includeHTML();</script>

}
