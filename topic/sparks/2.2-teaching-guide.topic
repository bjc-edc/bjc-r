title: Teaching Guide for Unit 2 Lab 2: Graphics and Animation

{
h2: Lab 2: Graphics and Animation
	raw-html: <p>After exploring song writing as an introduction to sequencing and looping commands, students explore the graphical aspects of  Snap<em>!</em> programing, including sprite movement and costumes as well as events such as clicking a sprite or a specific area on the  Snap<em>!</em>. stage. One goal is for students to create a fun and/or useful object of their own design such as an animated greeting card to share with others or an interactive poster for a presentation topic in another class. Another goal is for students to consider the user experience and solicit feedback before and after coding the project.</p>
	raw-html: <div class="endnote"><p>This lab laid out differently than previous labs. In response to teacher requests for shorter lab pages and more opportunities for differentiation, Unit 2 Lab 2 offers a new design with a greater number of shorter lab pages, some of which are entirely optional. To further shorten the appearance of the student-facing pages (both to present more manageable-looking content, but also to facilitate navigation), more of the text has been hidden behind links that open additional information available on the page.</p><p>As a teacher, you may choose to include some of the supplemental pages or to skip some suggested pages (details on how to decide below) to adjust for the time you have available. Additionally, this Teacher Guide page has been set up differently to allow you to view the teacher-facing content for each student page one page at a time in a more focused format rather than by scrolling through a long list. Please provide us with your feedback on this new model as we consider whether to design and redesign other BJC Sparks labs with these formatting changes.</p></div>

h3: Pacing
	raw-html: <p>This lab is designed for X&ndash;X class periods (<strong>X&ndash;X minutes</strong>). You may opt to focus on some activities in this lab more than others.<ul>
	resource: Activity 1: Sprite Costumes and Stage Backgrounds [/bjc-r/sparks/teaching-guide/U2/L2/01-TG.html]
		raw-html: <li>20&ndash;40 minutes</li>
	resource: Activity 2: Planning Your Interactive Project [bjc-r/sparks/student-pages/U2/L2/02-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 3: Adding a Stage Background [bjc-r/sparks/student-pages/U2/L2/03-TG.html]
		raw-html: <li>15&ndash;70</li>
	resource: Activity 4: Adding Sprite Costumes [bjc-r/sparks/student-pages/U2/L2/04-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 5: More with Sprites and Costumes [bjc-r/sparks/student-pages/U2/L2/05-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 6: Importing Your Own Images [bjc-r/sparks/student-pages/U2/L2/06-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 7: Planning your Animation [bjc-r/sparks/student-pages/U2/L2/07-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 8: Creating an Animation [bjc-r/sparks/student-pages/U2/L2/08-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 9: Responding to Events [bjc-r/sparks/student-pages/U2/L2/09-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 10: Importing Code [bjc-r/sparks/student-pages/U2/L2/10-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 11: Adding Sounds [bjc-r/sparks/student-pages/U2/L2/11-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 12: Choosing Your Click Areas [bjc-r/sparks/student-pages/U2/L2/12-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 13: Setting Up Your Click Areas [bjc-r/sparks/student-pages/U2/L2/13-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 14: <code>Broadcast</code>ing a Click Message [bjc-r/sparks/student-pages/U2/L2/14-TG.html]
		raw-html: <li>X&ndash;X minutes</li>
	resource: Activity 15: Testing and Improving Your Interactive Project [bjc-r/sparks/student-pages/U2/L2/15-TG.html]
		raw-html: <li>45&ndash;110 minutes</li>
		raw-html: </ol></div>

		<div w3-include-html="/bjc-r/utilities/includes/ms-daily-citn.txt"></div>

h3: Correlation with CSTA Standards
	raw-html: <div class="Standards"><ul><li><strong>2-AP-12: Design and iteratively develop programs that combine control structures, including nested loops and compound conditionals.</strong> Control structures can be combined in many ways. Nested loops are loops placed within loops. Compound conditionals combine two or more conditions in a logical relationship (e.g., using AND, OR, and NOT), and nesting conditionals within one another allows the result of one conditional to lead to another. For example, when programming an interactive story, students could use a compound conditional within a loop to unlock a door only if a character has a key AND is touching the door.</li><li><strong>2-AP-13: Decompose problems and subproblems into parts to facilitate the design, implementation, and review of programs.</strong> Students should break down problems into subproblems, which can be further broken down to smaller parts. Decomposition facilitates aspects of program development by allowing students to focus on one piece at a time (e.g., getting input from the user, processing the data, and displaying the result to the user). Decomposition also enables different students to work on different parts at the same time. For example, animations can be decomposed into multiple scenes, which can be developed independently.</li><li><strong>2-AP-14: Create procedures with parameters to organize code and make it easier to reuse.</strong> Students should create procedures and/or functions that are used multiple times within a program to repeat groups of instructions. These procedures can be generalized by defining parameters that create different outputs for a wide range of inputs. For example, a procedure to draw a circle involves many instructions, but all of them can be invoked with one instruction, such as “drawCircle.” By adding a radius parameter, the user can easily draw circles of different sizes.</li><li><strong>2-AP-15: Seek and incorporate feedback from team members and users to refine a solution that meets user needs.</strong> Development teams that employ user-centered design create solutions (e.g., programs and devices) that can have a large societal impact, such as an app that allows people with speech difficulties to translate hard-to-understand pronunciation into understandable language. Students should begin to seek diverse perspectives throughout the design process to improve their computational artifacts. Considerations of the end-user may include usability, accessibility, age-appropriate content, respectful language, user perspective, pronoun use, color contrast, and ease of use. </li><li><strong>2-AP-16: Incorporate existing code, media, and libraries into original programs, and give attribution.</strong> Building on the work of others enables students to produce more interesting and powerful creations. Students should use portions of code, algorithms, and/or digital media in their own programs and websites. At this level, they may also import libraries and connect to web application program interfaces (APIs). For example, when creating a side-scrolling game, students may incorporate portions of code that create a realistic jump movement from another person's game, and they may also import Creative Commons-licensed images to use in the background. Students should give attribution to the original creators to acknowledge their contributions.</li><li><strong>2-AP-19: Document programs in order to make them easier to follow, test, and debug.</strong> Documentation allows creators and others to more easily use and understand a program. Students should provide documentation for end users that explains their artifacts and how they function. For example, students could provide a project overview and clear user instructions. They should also incorporate comments in their product and communicate their process using design documents, flowcharts, and presentations.</li></ul></div>

}
