title: Teaching Guide for Unit 2: Abstraction

{

h3: Purpose
		raw-html: <p><strong>Programming Focus:</strong> Abstraction and Structure</p>
		raw-html: <p>This unit deepens students' understanding of abstraction, most importantly by introducing <strong>data abstraction</strong>, in which the idea of data types is extended from the ones built into a programming language (e.g., number, text string, list) to include types that are meaningful in the context of a particular project, such as the items in a quiz, each of which includes a question and an answer.  Most of the topics introduced in this unit will be used in more depth in later units.  For example, the number guessing game in Lab 1 introduces the <em>binary search</em> algorithm, which will be an important example in the analysis of algorithms in Unit 5.  Lists and abstract data types, introduced in Lab 2, will be used in more complex ways in the contact list app of Unit 3.  Labs 3 and 4 introduce various mathematical functions, Boolean-valued (true/false) and numeric-valued, respectively.</p>
		raw-html: <p>This unit also introduces an explicit discussion of <strong>debugging</strong> techniques.</p>
	
	raw-html: <p><strong>Social Implications Focus:</strong> Media, Sharing, and Copyright</p>
		raw-html: <p>Copyrights are often discussed in a "computer ethics" orientation: "Don't violate copyrights!"  <em>This is not the BJC approach.</em>  First of all, we never lecture students about what they should or shouldn't do.  We're not their parents.  Second, the rights and wrongs of copyright law aren't as simple as many people assume.  U2L5p3 quotes the relevant part of the US Constitution, which emphasizes that copyright is, despite the name, not a <em>right</em> in the way that freedom of speech is a right.  Copyright is a <em>limited-time</em> monopoly whose social purpose is to get all creations eventually into the public domain.  Our goal is to get students to think as creatively about social problems as they do about technical problems:  "Okay, you don't want to have to pay for music, so how do you propose we support musicians so that they can keep making music?"  Streaming services such as Pandora and Spotify are one attempt at an answer, but they just introduce one more middleman between the musician and the listener.</p>
	
h3: Big Ideas 1, 2, 4, 5, 7
        raw-html:<p>The major <strong>programming (Big Idea 5)</strong> focus of Unit 2 is on structure and <strong>abstraction (Big Idea 2)</strong>. Students learn to chunk details of <strong>algorithms (Big Idea 4)</strong> into meaningful, recognizable, potentially reusable parts, helping the top-level procedure show the structure of the program un-camouflaged by the details. This makes reading and debugging code easer and allows the smaller tool-procedures to be reused in other algorithms and to be refined without requiring revision to higher-level procedures. Students are offered a choice of programming projects designed to strengthen these ideas with <strong>creative (Big Idea 1)</strong> tasks. The unit includes a lab on copyright laws and issues addressing <strong>global impact (Big Idea 7)</strong>.  </strong></p>
        
h3: Computational Thinking Practices P1, P2, P3, P4, P5, P6
        raw-html:<p>The focus on structure, <strong>abstraction (P3)</strong>, and debugging in Unit 2 supports students <strong>analyzing problems and digital artifacts (P4)</strong> as they determine where abstraction is needed and how to implement it and then critique their own code to improve it and resolve errors. The increased challenge of Unit 2's programs gives pair programmers good reason and plenty of practice to develop <strong>communication (P5)</strong> and <strong>collaboration (P6)</strong> skills because those skills are genuinely needed as students create more complex <strong>computational artifacts (P2)</strong>. Discussions of social implications also help to develop communication and collaboration skills and create a context for broader discussion of more challenging social issues later in the year. In this unit, students <strong>connect computing (P1)</strong> to issues they may be able to identify with: creative rights in the digital era.</p>

h3: Student Labs
	resource: Lab 1: Games [/bjc-r/cur/teaching-guide/U2/lab-pages/1-variables-games.html]
	raw-html:<ul><li>3-5 days (105-210 minutes)</li></ul>
	resource: Lab 2: Making Lists [/bjc-r/cur/teaching-guide/U2/lab-pages/2-data-art.html]
	raw-html:<ul><li>2-4 days (75-150 minutes) for required pages</li></ul>
	resource: Lab 3: Making Decisions [/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html]
	raw-html:<ul><li>4-8 days (165-330 minutes)</li></ul>
	resource: Lab 4: Making Computers Do Math [/bjc-r/cur/teaching-guide/U2/lab-pages/4-making-computers-do-math.html]
	raw-html:<ul><li>2-4 days (70-140 minutes)</li></ul>
	resource: Lab 5: Copyrights [/bjc-r/cur/teaching-guide/U2/lab-pages/5-copyrights.html]
	raw-html:<ul><li>2-3 days (60-120 minutes)</li></ul>
	resource: Optional Projects [/bjc-r/cur/teaching-guide/U2/lab-pages/U2-optional-projects.html]

h3: AP Classroom
    raw-html: <p>After Unit 2, the following AP CSP topics have been covered completely. You may choose to use the <a href="https://myap.collegeboard.org/login" title="AP Classroom" target="_blank">AP Classroom</a> formative assessment practice questions for the following topics:<ul>
    raw-html: <li><strong>3.5 Boolean Expressions</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 3: Making Decisions">Unit 2 Lab 3: Making Decisions</a>)</li>
    raw-html: <li><strong>3.7 Nested Conditionals</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 3: Making Decisions">Unit 2 Lab 3: Making Decisions</a>)</li>
    raw-html: <li><strong>3.12 Calling Procedures</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U1/lab-pages/3-modern-art-polygons.html?topic=nyc_bjc%2F1-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 1 Lab 3: Modern Art with Polygons">Unit 1 Lab 3: Modern Art with Polygons</a> and <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/4-making-computers-do-math.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 4: Making Computers Do Math">Unit 2 Lab 4: Making Computers Do Math</a>)</li>
    raw-html: <li><strong>3.14 Libraries</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/4-making-computers-do-math.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 4: Making Computers Do Math">Unit 2 Lab 4: Making Computers Do Math</a>)</li>
    raw-html: <li><strong>3.15 Random Values</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U1/lab-pages/2-gossip.html?topic=nyc_bjc%2F1-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 1 Lab 2: Gossip">Unit 1 Lab 2: Gossip</a> and <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/1-variables-games.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 1: Making Games">Unit 2 Lab 1: Making Games</a>)</li>
    raw-html: </ul></p>
    
h3: Assessment: 
		raw-html: <div class="todo">Assessments need to be revisited after moving Complexity lab to U3. --MF, 8/31/19</div>
        raw-html: <p>The linked document has 4 questions that could be a good supplement to the materials learned in this Unit.</p><ul><li><a href="https://docs.google.com/document/d/1QM3HeYEbnVgY9MsC7flIHf-dRrHJjC7wL1xH9gMKClc/edit?usp=sharing" target="_blank">Unit 2 Assessment</a></li><li><a href="https://docs.google.com/document/d/1EcBa53MlQe7HlQhM3bSFmpFmHyzz0RQaWrYaUDaDs5Q/edit?usp=sharing" target="blank">Unit 2 Assessment Solutions</a>.</li></ul>

		raw-html: <!--<p>Students choose their two best of projects from Unit 2, refine them as needed, and for each of them write a description according to <a href="https://docs.google.com/document/d/1hLlkNaSY0Wu0j090juyo3o96RNVIZLGqipD-02NZ4SI/edit?usp=sharing" target="_blank">these guidelines</a>. In preparation for the <a href="http://media.collegeboard.com/digitalServices/pdf/ap/ap-computer-science-principles-performance-assessment.pdf#page=3" target="_blank">AP Create Task</a>, students describe the purpose of each of their programs, how to use them (in 100 words or less), and how  they developed their programs (in 100 words or less), and they also write a description of the abstractions in each of their programs (in 100 words or less). In total, they should complete their two descriptions in 600 words or less.</p>-->
	
}
