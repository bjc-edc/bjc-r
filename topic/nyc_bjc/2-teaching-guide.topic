title: Teaching Guide for Unit 2: Abstraction

{

h3: Purpose
	raw-html: <p><strong>Programming Focus:</strong> Abstraction and Structure</p>
    	raw-html: <p>In this unit students explore data structures (e.g., variables, lists, abstract data types) and program control structures (e.g., predicates, conditionals, higher order functions) that support abstraction.  The general idea of abstraction is chunking a task into human-meaningful units and sweeping the details of those units under the rug. This makes a large project manageable because each chunk can be built and tested  independently, and so that the composite of all the chunks is easier to read and debug.  Of course, the programmer must do the under-the-rug work to build the abstractions, but once they work, those details can then be ignored. Students learn to test for special cases<!--, and how to use, sequence, and optimize the conditionals that control a program-->, to perform tasks and/or report information based on those cases. They also learn to create abstract data types and access and add list items in preparation for a deeper study of lists in Unit 3. These ideas are core to the AP CS Principles Abstraction standards and are core in both mathematical thinking and computer science.</p>
		raw-html:<p>Students also get experience finding and removing bugs from code, and learn how to incorporate old code that they've built into a new project that needs it.</p>  <!--<p>Students also begin to think about what makes correctly working code "good" code&mdash;is it the brevity, the clarity, or some combination? This, too, helps them begin to attend to structure. They learn to think about debugging by deliberately looking for ways to make a program fail, and then finding ways to avert failures.</p>
	
	raw-html: <p><strong>Social Implications Focus:</strong> Media, Sharing, and Copyright</p>
		raw-html: <p>Students learn the meaning of copyrights and discuss their impact and relevance in an increasingly computationally mediated world.</p>
	
h3: Big Ideas 1, 2, 4, 5, 7
        raw-html:<p>The major <strong>programming (Big Idea 5)</strong> focus of Unit 2 is on structure and <strong>abstraction (Big Idea 2)</strong>. Students learn to chunk details of <strong>algorithms (Big Idea 4)</strong> into meaningful, recognizable, potentially reusable parts, helping the top-level procedure show the structure of the program un-camouflaged by the details. This makes reading and debugging code easer and allows the smaller tool-procedures to be reused in other algorithms and to be refined without requiring revision to higher-level procedures. Students are offered a choice of programming projects designed to strengthen these ideas with <strong>creative (Big Idea 1)</strong> tasks. The unit includes a lab on copyright laws and issues addressing <strong>global impact (Big Idea 7)</strong>.  </strong></p>
        
h3: Computational Thinking Practices P1, P2, P3, P4, P5, P6
        raw-html:<p>The focus on structure, <strong>abstraction (P3)</strong>, and debugging in Unit 2 supports students <strong>analyzing problems and digital artifacts (P4)</strong> as they determine where abstraction is needed and how to implement it and then critique their own code to improve it and resolve errors. The increased challenge of Unit 2's programs gives pair programmers good reason and plenty of practice to develop <strong>communication (P5)</strong> and <strong>collaboration (P6)</strong> skills because those skills are genuinely needed as students create more complex <strong>computational artifacts (P2)</strong>. Discussions of social implications also help to develop communication and collaboration skills and create a context for broader discussion of more challenging social issues later in the year. In this unit, students <strong>connect computing (P1)</strong> to issues they may be able to identify with: creative rights in the digital era.</p>

h3: Student Labs
	resource: Lab 1: Improving Games by Using Variables [/bjc-r/cur/teaching-guide/U2/lab-pages/1-variables-games.html]
	raw-html:<ul><li>3-5 days (100-200 minutes)</li></ul>
	resource: Lab 2: Making Art by Using Data Structures [/bjc-r/cur/teaching-guide/U2/lab-pages/2-data-art.html]
	raw-html:<ul><li>2-4 days (75-150 minutes) for required pages</li></ul>
	resource: Lab 3: Making Decisions by Using Predicates [/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html]
	raw-html:<ul><li>3-5 days (105-210 minutes)</li></ul>
	resource: Lab 4: Dealing with Complexity [/bjc-r/cur/teaching-guide/U2/lab-pages/4-layers-abstraction.html]
	raw-html:<ul><li>4-6 days (155-230 minutes) for required pages</li></ul>
	resource: Lab 5: Copyrights [/bjc-r/cur/teaching-guide/U2/lab-pages/5-copyrights.html]
	raw-html:<ul><li>2-3 days (60-120 minutes)</li></ul>
	resource: Optional Projects [/bjc-r/cur/teaching-guide/U2/lab-pages/U2-optional-projects.html]

h3: Assessment: 
		raw-html: <p>The <a href="https://docs.google.com/document/d/1QM3HeYEbnVgY9MsC7flIHf-dRrHJjC7wL1xH9gMKClc/edit?usp=sharing" target="_blank">linked document</a> has 4 questions that could be a good supplement to the materials learned in this Unit.</p>


		raw-html: <!--<p>Students choose their two best of projects from Unit 2, refine them as needed, and for each of them write a description according to <a href="https://docs.google.com/document/d/1hLlkNaSY0Wu0j090juyo3o96RNVIZLGqipD-02NZ4SI/edit?usp=sharing" target="_blank">these guidelines</a>. In preparation for the <a href="http://media.collegeboard.com/digitalServices/pdf/ap/ap-computer-science-principles-performance-assessment.pdf#page=3" target="_blank">AP Create Task</a>, students describe the purpose of each of their programs, how to use them (in 100 words or less), and how  they developed their programs (in 100 words or less), and they also write a description of the abstractions in each of their programs (in 100 words or less). In total, they should complete their two descriptions in 600 words or less.</p>-->
	
}