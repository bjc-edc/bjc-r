title: Teaching Guide for Unit 2: Conditionals, Abstraction, and Testing

{
h3: Purpose
    raw-html: <p><strong>Programming Focus:</strong> Conditionals, Abstraction</p>
    raw-html: <p>Unit 2 continues to introduce new programming concepts, especially conditionals, and new Snap<em>!</em> features, but its major programming focus is on structure and abstraction. Starting with the challenging task of teaching the computer to generate the plurals of nouns (e.g., butterfly &rarr; butterflies, moth &rarr; moths, bush &rarr; bushes), students begin thinking about the <em>structure of programs</em> and even, in a very preliminary way, the <em>structure of data</em>. They learn about conditional statements, and think about when to use a sequence of conditionals, when to combine the conditions (Boolean values) first and have fewer conditional statements, and when to create &quot;specialist&quot; blocks, relegating lower level details to sub-procedures so that the main top-level block  shows the structure of the logic uncamouflaged by the details. This structure  allows the &quot;specialist&quot; blocks to be refined without requiring revision to the overall program. All of these are at the heart of the Abstraction standard of AP CS Principle and are core to mathematical thinking as well as computer science. Students also begin to think about what makes correctly working code &quot;good&quot; code&mdash;is it the brevity, the clarity, or some combination? (They do not yet encounter situation in which the speed-efficiency of the code can be a criterion.) This, too, helps them begin to attend to structure. And they begin to think about debugging by deliberately looking for ways to make a program fail, and then finding ways to avert failures.</p>
	raw-html: <p><strong>Social Implications Focus:</strong> Media, Sharing, and Copyright; Innovations and Computing in Other Fields</p>
	raw-html: <p>Students are not yet at a stage in programming where they can readily connect  programming  with social implications.</p>
	
h3: Highlighting Computational Thinking 
	raw-html: <p>Of the six AP CS Principles Computational Thinking Practices, not all can be thought of as specific to computing technology. For example, while Communicating and Collaborating are certainly <em>essential</em> elements of good CS practice, they are  essential elements of good practice in virtually <em>all</em> domains. Similarly, Analyzing Problems and Artifacts is core to scientific and technical fields from archaeology to zoology and so is also not really specific to CS. These essential practices can (and should) certainly be developed in other subject areas, but BJC AP CS does its share both in service of computer science, and in service of all the other domains that require Communicating and Collaborating. The increased challenge of Unit 2's programs gives pair programmers a unique opportunity to develop communication and collaboration skills, because they are genuinely needed. Over the course of the year, the discussions of social implications also helps to develop those skills, and creates a context for broader discussion of hard social issues. The focus on structure, abstraction, and debugging connect the AP CS Learning Objectives (especially 1, 2, and 5) and Computational Thinking Practices (P2 through P5) with the Common Core State Standards for Mathematical Practice, in particular standards MPS 3 (viable argument and critiquing reasoning), MPS 7 (structure), and MPS 6 (statement with precision).</p>


heading: Week 4 (Programming Focus)
	resource: Lab 1: Conditional Blocks [/bjc-r/cur/teaching-guide/U2/Week04/1-conditional-blocks.html]
	resource: Lab 2: Script Variables [/bjc-r/cur/teaching-guide/U2/Week04/2-script-variables.html]
	resource: Additional Problems/Activities [/bjc-r/cur/teaching-guide/U2/Week04/activities.html]
	resource: Homework Assignments [/bjc-r/cur/teaching-guide/U2/Week04/assignments.html]

heading: Week 5 (Programming Focus)
	resource: Lab 3: Developing More Complex Programs [/bjc-r/cur/teaching-guide/U2/Week05/3-developing-more-complex-programs.html]
	resource: Additional Problems/Activities [/bjc-r/cur/teaching-guide/U2/Week05/activities.html]
	resource: Homework Assignments [/bjc-r/cur/teaching-guide/U2/Week05/assignments.html]
	
heading: Week 6 (Social Implications Focus)
	resource: Lab 4: Privacy; Community and Online Interactions [/bjc-r/cur/teaching-guide/U2/Week06/4-privacy-community-online-interactions.html]
	resource: Additional Problems/Activities [/bjc-r/cur/teaching-guide/U2/Week06/activities.html]
	resource: Homework Assignments [/bjc-r/cur/teaching-guide/U2/Week06/assignments.html] 
	
heading: Week 7 (Social Implications Focus)
	resource: Lab 5: Bits and Information [/bjc-r/cur/teaching-guide/U2/Week07/5-bits-and-information.html] 
	resource: Additional Problems/Activities [/bjc-r/cur/teaching-guide/U2/Week07/activities.html]
	resource: Homework Assignments [/bjc-r/cur/teaching-guide/U2/Week07/assignments.html]
	
heading: Investigations
	resource: Checking for Leap Years [/bjc-r/cur/teaching-guide/U2/Investigations/checking-for-leap-years.html] 
	
}