title: Teaching Guide for Unit 2: Conditionals and Abstraction

{
	

h3: Purpose
	raw-html: <p><strong>Programming Focus:</strong> Conditionals and Abstraction</p>
    	raw-html: <p>The programming labs of Unit 2 introduce conditionals, predicates, and script variables, and use small projects in language/linguistics, music, art, sprite-interaction, simple encryption, and mathematics both as contexts for practice of the computer science concepts and also to illustrate the broad variety of directions students’ own projects can take. Lab 1 also introduces the power of lists, foreshadowing a deeper study of lists in Unit 3.</p><p>Unit 2 programming labs continue a focus on structure and abstraction. Starting with the challenging task of teaching the computer to generate the plurals of nouns (e.g., butterfly &rarr; butterflies, moth &rarr; moths, bush &rarr; bushes), students begin thinking about the <em>structure of programs</em>. They learn to test for special cases, and how to use, sequence, and optimize the conditionals that control a program based on those cases. They learn to chunk details of a process into meaningful, recognizable parts, creating "specialist" blocks so that the main top-level block can show the structure of the program un-camouflaged by the details. This makes reading and debugging code easer, and allows the "specialist" blocks to be refined without requiring revision to the overall program. All of these are at the heart of the Abstraction standard of AP CS Principle and are core to mathematical thinking as well as computer science.</p><p>Students also begin to think about what makes correctly working code "good" code—is it the brevity, the clarity, or some combination? (They do not yet encounter situations in which the speed-efficiency of the code can be a criterion.) This, too, helps them begin to attend to structure. They learn to think about debugging by deliberately looking for ways to make a program fail, and then finding ways to avert failures.</p>
	
	raw-html: <p><strong>Social Implications Focus:</strong> Media, Sharing, and Copyright; Innovations and Computing in Other Fields, Encryption</p>
		raw-html: <p>Students consider the innovations around us that collect data about us, the availability of information online, why privacy is good to protect, reasons for giving up privacy, and how to best protect their own online privacy; they also examine communications technology and ways that computing impacts community (including cyberbullying). Students then learn about encryption, including message encoding and decoding, ciphers, RSA encryption and encryption politics, and cryptography innovations. While we do emphasize how revolutionary public key cryptography has been, the main emphasis is on how the various social stakeholders view the question of strong encryption of user data.</p>
	
h3: Big Ideas 1, 2, 4, 5, 7
        raw-html:<p>The major <strong>programming (Big Idea 5)</strong> focus of Unit 2 is on structure and <strong>abstraction (Big Idea 2)</strong>. Students learn to chunk details of <strong>algorithms (Big Idea 4)</strong> into meaningful, recognizable parts by creating "specialist" procedures so that the top-level procedure can show the structure of the program un-camouflaged by the details. This makes reading and debugging code easer and allows the "specialist" procedures to be reused in other algorithms and to be refined without requiring revision to higher-level procedures. Students are offered a choice of programming projects designed to strengthen these ideas with <strong>creative (Big Idea 1)</strong> tasks. The unit also includes a Social Implications lab on data privacy, cyberbullying, and impacts on community building, addressing <strong>global impact (Big Idea 7).</strong></p>
        
h3: Computational Thinking Practices P1, P2, P3, P4, P5, P6
        raw-html:<p>The increased challenge of Unit 2's programs gives pair programmers good reason and plenty of practice to develop <strong>communication (P5)</strong> and <strong>collaboration (P6)</strong> skills because those skills are genuinely needed as students create these more complex <strong>computational artifacts (P2)</strong>. Over the course of the year, the discussions of social implications also help to develop those communication and collaboration skills and create a context for broader discussion of hard social issues.</p>
        raw-html:<p>The focus on structure, <strong>abstraction (P3)</strong>, and debugging in Unit 2 also supports students <strong>analyzing problems and digital artifacts (P4)</strong> for they must determine where abstraction is needed and how to implement it and then critique their own code in their attempt to improve it and resolve errors.</p>
        raw-html:<p>In the Social Implications Labs, students <strong>connect computing (P1)</strong> to issues they can identify with, both the impacts of computing and the connections between people and computing.</p>

h3: Student Labs
	resource: Lab 1: Improving Games by Using Variables [/bjc-r/cur/teaching-guide/U2/lab-pages/1-variables-games.html]
	raw-html:<ul><li>3-5 days (100-200 minutes)</li></ul>
	resource: Lab 2: Making Art by Using Data Structures [/bjc-r/cur/teaching-guide/U2/lab-pages/2-data-art.html]
	raw-html:<ul><li>X-X days (X-X minutes)</li></ul>
	resource: Lab 3: Solving Puzzles by Using Predicates [/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html]
	raw-html:<ul><li>X-X days (X-X minutes)</li></ul>
	resource: Lab 4: Programming in Layers [/bjc-r/cur/teaching-guide/U2/lab-pages/4-layers-abstraction.html]
	raw-html:<ul><li>5-7 days (220-300 minutes)</li></ul>
	resource: Lab 5: Copyrights (v1) [/bjc-r/cur/teaching-guide/U2/lab-pages/6-copyrights.html]
	resource: Lab 5: Copyrights (v2) [/bjc-r/cur/teaching-guide/U2/lab-pages/5-copyrights.html]
	raw-html:<ul><li>2-3 days (60-120 minutes)</li></ul>
	resource: Optional Projects [/bjc-r/cur/teaching-guide/U2/lab-pages/U2-optional-projects.html]
	raw-html:<ul><li>X-X days (X-X minutes)</li></ul>

h3: Assessment: 
		raw-html: <p>The <a href="https://docs.google.com/document/d/1QM3HeYEbnVgY9MsC7flIHf-dRrHJjC7wL1xH9gMKClc/edit?usp=sharing" target="_blank">linked document</a> has 4 questions that could be a good supplement to the materials learned in this Unit.</p>


		raw-html: <!--<p>Students choose their two best of projects from Unit 2, refine them as needed, and for each of them write a description according to <a href="https://docs.google.com/document/d/1hLlkNaSY0Wu0j090juyo3o96RNVIZLGqipD-02NZ4SI/edit?usp=sharing" target="_blank">these guidelines</a>. In preparation for the <a href="http://media.collegeboard.com/digitalServices/pdf/ap/ap-computer-science-principles-performance-assessment.pdf#page=3" target="_blank">AP Create Task</a>, students describe the purpose of each of their programs, how to use them (in 100 words or less), and how  they developed their programs (in 100 words or less), and they also write a description of the abstractions in each of their programs (in 100 words or less). In total, they should complete their two descriptions in 600 words or less.</p>-->
	
}