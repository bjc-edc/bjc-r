title: Teaching Guide for Unit 3: Data Structures

{

h3: Purpose
	raw-html: <p><strong>Programming Focus:</strong> Complexity and Abstraction, Lists and Higher Order Functions</p>
		raw-html:<p>This unit continues the study of abstraction as the means to control complexity.  Lab 1 explores several examples of complexity in different contexts.  Labs 2 and 3 focus on two applications of lists, an <em>aggregate</em> data type for storing multiple items of any type, including numbers, strings, other lists, or even blocks and scripts. Just as functions can take numbers and strings as inputs, they can also take lists as input, or produce lists as output.  A list is an ordered, numbered sequence of items.  Similar data types in other programming languages may be called "arrays," "sequences," or "vectors."</p>
        raw-html:<div class="todo">This feels like an overemphasis on HOFs given what's actually in the unit (most of the HOF stuff is in just one lab). --MF, 11/18/19<br />No, two labs, the two that are about data structures, which is the name of this unit!  Lab 1 is here only because you wanted to even out the lengths of U2 and U3, and shouldn't be allowed to lose the focus of the unit for teachers. -b</div>
        <p>Our approach to lists emphasizes the use of the <strong>higher-order functions</strong> <code>map</code>, <code>keep</code>, and <code>combine</code>, which allow programmers to think about a list as a single value, rather than looping explicitly through the items in the list one at a time. These functions are called "higher order" because, along with other data, they take functions as inputs.  For example, often a programmer wants to compute some function of each item in a list.  Instead of writing separate procedures such as "take the first letter of each item," "add 3 to each item," etc., the <code>map</code> function generalizes the "... of each item" part, and takes another function as input to specify the "first letter of" or "add 3 to" part.</p><img src="/bjc-r/img/blocks/map-new.png" alt="map block">
        raw-html:<p>One of several design features that distinguishes BJC from other CS Principles curricula is that we emphasize <em>functional</em> programming. One virtue of the higher order list functions is that they generate new lists to report, rather than mutate existing lists.  This is in contrast with the imperative, looping, mutation-based programming that is more common, but more error-prone, in dealing with sequential data. No attention (for now) needs to be placed on the idea of procedures as data; the Snap<em>!</em> visual representation of higher order functions makes the use of a function (rather than the value it reports) as input apparent at a glance. The gray ring that represents a procedure as data is already in the higher order function block, and the user of the higher order function doesn't have to do anything else to make the function itself, rather than a value it reports, be taken as the input.  Near the end of the course, students build these higher order functions for themselves.</p>
        raw-html:<p>In situations in which imperative programming is needed, we still use a higher order procedure, <code>for each item</code>, a C-shaped block that takes a list and a script to be run for each item in the list.  This avoids the need for index variables.  (Students have already been using FOR EACH since U2L2.)</p>
		raw-html: <p>The problems students are expected to solve in this unit are harder than what they saw in the first two units.  It may be a good idea to tell students to expect that.  Nothing in the unit requires superhuman programming ability, but we expect that students will have to struggle to understand the ideas. Encourage them by letting them know that you think they are ready for the challenge.</p>

	raw-html: <p><strong>Social Implications Focus:</strong> Robots and AI</p>

		raw-html: <p>Students are introduced to some ideas and issues in artificial intelligence and discuss the challenges and consequences of this technology.  As always, discourage "is this technology good or bad?" questions, and instead encourage "What's good about this technology?  What's bad about it?  How can we change the design of this technology or of its social context to make it better?"</p>

h3: 2020 Big Ideas: CRD, AAP, IOC; and Computational Thinking Practices and Skills: 2.A, 3.A, 3.B, 3.C, 5.C, 5.E
        raw-html:<p>This unit opens with an unplugged lab page, in which students develop an algorithm for navigating a maze without using a programming language (Skill: <strong>2.A</strong>; Big Idea: <strong>AAP</strong>). Next, they use procedural abstraction to manage the complexity of drawing a fractal, a brick wall, and a tic-tac-toe board (Skills: <strong>3.B</strong>, <strong>3.C</strong>; Big Idea: <strong>AAP</strong>). In the second lab, students use nested abstract data types and list traversal to manage data inputted by a user and to output requested data and explain how using abstract data types helps manage complexity (Skills: <strong>3.A</strong>, <strong>3.C</strong>; Big Ideas: <strong>CRD</strong>, <strong>AAP</strong>). At the end of the unit, students consider the beneficial and harmful impacts of robots and AI, including the role of bias (Skills: <strong>5.C</strong>, <strong>5.E</strong>; Big Ideas: <strong>IOC</strong>). </p>
        
h3: 2020 Enduring Understandings: CRD-2, AAP-1, AAP-2, AAP-3, IOC-1
        raw-html:<p>In Lab 1: Dealing with Complexity, students extend their use of sequencing, selection, and iteration to create an algorithm without using a programming language; and they extend and formalize their use of procedural abstraction (<strong>AAP-2</strong>, <strong>AAP-3</strong>). In Lab 2: Contact List, students learn to receive and process user input to determine program output; and they extend their use of data abstraction to include nested abstract data types (<strong>CRD-2</strong>, <strong>AAP-1</strong>). In Lab 4: Robots and Artificial Intelligence, students deepen their study of the unintended consequences of computing to include developing technologies and the risks of built-in bias (<strong>IOC-1</strong>).</p>

h3: Student Labs
        raw-html:<div class="commentBig"><div class="todo">Can this be cut now? --MF, 8/31/19<br />No, let's move it to U5 optional projects or something. -bh</div>Teachers who used BJC during the summer of 2017 may notice that the Sorting Data lab has been removed. If you still wish to use this lab, you can find the content here:<ul><li><a href="/bjc-r/cur/programming/3-lists/old/2-sorting/1-recursion.html" target="_blank">Sorting Data page 1: Recursion Revisited</a></li><li><a href="/bjc-r/cur/programming/3-lists/old/2-sorting/2-selection-sort.html" target="_blank">Sorting Data page 2: Selection Sort</a></li><li><a href="/bjc-r/cur/programming/3-lists/old/2-sorting/3-sort-by-name.html" target="_blank">Sorting Data page 3: Sorting Contacts by Name</a></li><li><a href="/bjc-r/cur/teaching-guide/U3/old/2-sorting-data.html" target="_blank">Teacher Guide for Sorting Data</a></li></ul></div>
        resource: Lab 1: Dealing with Complexity [/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html]
        //raw-html:<ul><li>4-6 days (175-270 minutes) for required pages</li></ul>
        resource: Lab 2: Contact List [/bjc-r/cur/teaching-guide/U3/lab-pages/2-contact-list.html]
        //raw-html:<ul><li>2-4 days (75-140 minutes)</li></ul>
            //resource: Lab 2: Sorting Data [/bjc-r/cur/teaching-guide/U3/lab-pages/2-sorting-data.html]
            //raw-html:<ul><li>3-5 days (95-190 minutes)</li></ul>
        resource: Lab 3: Tic-Tac-Toe [/bjc-r/cur/teaching-guide/U3/lab-pages/3-tic-tac-toe.html]
        //raw-html:<ul><li>no required pages</li></ul>
        resource: Lab 4: Robots and Artificial Intelligence [/bjc-r/cur/teaching-guide/U3/lab-pages/4-robots-ai.html]
        //raw-html:<ul><li>4-8 days (150-330 minutes)</li></ul>
        resource: Optional Projects [/bjc-r/cur/teaching-guide/U3/lab-pages/U3-optional-projects.html]
	
h3: AP Classroom
        raw-html: <p>After Unit 3, the following AP CSP topics have been covered completely. You may choose to use the <a href="https://myap.collegeboard.org/login" title="AP Classroom" target="_blank">AP Classroom</a> formative assessment practice questions for the following topics:<ul>
            raw-html: <li><strong>3.2 Data Abstraction</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/2-data-art.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 2: Making Lists">Unit 2 Lab 2: Making Lists</a>; <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 3: Making Decisions">Unit 2 Lab 3: Making Decisions</a>; and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/2-contact-list.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 2: Contact List">Unit 3 Lab 2: Contact List</a>)</li>
            raw-html: <li><strong>3.3 Mathematical Expressions</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/1-variables-games.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 1: Making Games">Unit 2 Lab 1: Making Games</a>; <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 3: Making Decisions">Unit 2 Lab 3: Making Decisions</a>; <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/4-making-computers-do-math.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 4: Making Computers Do Math">Unit 2 Lab 4: Making Computers Do Math</a>; and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 1: Dealing with Complexity">Unit 3 Lab 1: Dealing with Complexity</a>)</li>
            raw-html: <li><strong>3.6 Conditionals</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 3: Making Decisions">Unit 2 Lab 3: Making Decisions</a>; <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/4-making-computers-do-math.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 4: Making Computers Do Math">Unit 2 Lab 4: Making Computers Do Math</a>; and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 1: Dealing with Complexity">Unit 3 Lab 1: Dealing with Complexity</a>)</li>
            raw-html: <li><strong>3.8 Iteration</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/2-data-art.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 2: Making Lists">Unit 2 Lab 2: Making Lists</a> and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 1: Dealing with Complexity">Unit 3 Lab 1: Dealing with Complexity</a>)</li>
            raw-html: <li><strong>3.9 Developing Algorithms</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 3: Making Decisions">Unit 2 Lab 3: Making Decisions</a>; <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/4-making-computers-do-math.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 4: Making Computers Do Math">Unit 2 Lab 4: Making Computers Do Math</a>; and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 1: Dealing with Complexity">Unit 3 Lab 1: Dealing with Complexity</a>)</li>
            raw-html: <li><strong>3.13 Developing Procedures</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 1: Dealing with Complexity">Unit 3 Lab 1: Dealing with Complexity</a> and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/2-contact-list.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 2: Contact List">Unit 3 Lab 2: Contact List</a>)</li>
            raw-html: <li><strong>5.3 Computing Bias</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/4-robots-ai.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 4: Robots and Artificial Intelligence">Unit 3 Lab 4: Robots and Artificial Intelligence</a>)</li>
        raw-html: </ul></p>

h3: Assessment: Tic Tac Toe Analysis of Abstractions
		raw-html: <p>Students complete and refine their work on the Tic-Tac-Toe project, describe the purpose of the program (in 100 words or less), and write a description of the <strong><em>abstractions</em></strong> they used (in preparation for the <a href="http://media.collegeboard.com/digitalServices/pdf/ap/ap-computer-science-principles-performance-assessment.pdf#page=3" target="_blank">AP Create Task</a>). <a href="https://docs.google.com/document/d/103MsT0yaGdIdAITs6MrufEv5omXkE8Tygm97T18N2z0/edit?usp=sharing" target="_blank">This Unit 3 Asssessment file</a> includes student-facing instructions and a list of the abstractions students have used in developing this project.
	
}
