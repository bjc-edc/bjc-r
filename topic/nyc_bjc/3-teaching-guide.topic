title: Teaching Guide for Unit 3: Lists

{

h3: Purpose
	raw-html: <p><strong>Programming Focus:</strong> Lists, Abstraction, Higher Order Functions</p>
    raw-html: <!-- <p>Up to this point, students have seen a few built-in (the technical term is "primitive") data types&mdash;numbers, strings of characters, Boolean values&mdash;but have not yet had the chance to construct their own abstract data types, their own data structures.  When we use the block (picture of blue ask and wait block with "what's your name" in it) and reply "My name is secret" we humans see a structure based on our language, a three-word question and a four-word answer. But the computer sees these both as 17-character strings, making no distinction between letters, spaces, and punctuation, and not recognizing "words" at all. Strings have no internal "structure" beyond the order of the characters. They cannot, for example, be used sensibly to store a list of multiple numbers.</p> --> <p>This unit introduces lists, a powerful data type for storing multiple items of any type, including numbers, strings, other lists, or even blocks. Just as functions can take numbers and strings as inputs, they can also take lists as input, or produce lists as output.  A list is an ordered, numbered sequence of items.</p><p>Just as functions can take a number input or a string input, they can also take a list input. Students are introduced to several powerful list-processing functions, including the <strong>higher-order functions</strong> <code>map</code>, <code>keep</code>, and <code>combine</code>. These functions are called "higher order" because they take functions, along with other data, as inputs.  For example, often a programmer wants to compute some function of each item in a list.  Instead of writing separate procedures such as "take the first letter of each item," "add 3 to each item," etc., the <code>map</code> function generalizes the "... of each item" part, and takes another function as input to specify the "first letter of" or "add 3 to" part.</p><p style="color: blue;">One of several design decisions that distinguish BJC from other CS Principles curricula is that we emphasize <em>functional</em> programming. One virtue of the higher order list functions is that they generate new lists to report, rather than mutate existing lists.  This is in contrast with the imperative, looping, mutation-based programming that is more common, but more error-prone, in dealing with sequential data.</p><p>No attention (for now) needs to be placed on the idea of procedures as data; the Snap<em>!</em> visual representation of higher order functions makes the use of a function (rather than the value it reports) as input apparent at a glance. The grey ring that represents a procedure as data is already in the higher order function block, and the user of the higher order function doesn't have to do anything else to make the function itself, rather than a value it reports, be taken as the input.  Near the end of the course, students build these higher order functions for themselves.</p> 

	raw-html: <p><strong>Social Implications Focus:</strong> Search, Encryption</p>
	raw-html: <p>The social implications topics in Unit 3 are <em>search</em> and <em>encryption</em> (part 1). In both cases, the readings from <em>Blown to Bits</em> describe the underlying technology and also raise questions about risks.  The BJC lab pages focus more on the latter.  In the case of searching, the main issues are about user profiling (for serving advertising and for tailoring search results) and about bias in results (profile-based or otherwise). For encryption, we do emphasize how revolutionary public key cryptography has been, but the main emphasis is on how the various social stakeholders view the question of strong encryption of user data.</p>

h3: Pacing
	raw-html:<p>The 2 weeks of Programming Labs and 2 weeks of Social Implications Labs for Unit 3 can be distributed as works best for your class. Here are two possibilities: <ul><li>Work through the 4 programming labs in the first 2 weeks and then the social implications Labs 5 and 6 in the last 2 weeks as presented below.</li><li>Work through the 4 programming labs over all 4 weeks while concurrently working through the social implications labs (either on specific days of the week or as a part of each class across several days).</li></ul></p><div class="todo">Could these also be done programming, implications, programming, implications (8, 10, 9, 11)? --MF<br />I don't believe any of the pacing numbers below.  Could someone look at the current labs and decide again? -bh</div>


h3: Highlighting Computational Thinking
	raw-html: <p>Lists are an important representation of data, and thinking of lists as a single object (rather than a collection of objects) is a way students practice <strong>abstracting</strong>. We introduce the idea of implementing an abstract data type by writing constructor and selector functions. Students continue to <strong>collaborate</strong> through pair programming.</p><p>Each lab is built around a small "app" project, such as a contact list app.  This <strong>connects computing</strong> with the cell phone apps students understand, and an app is a <strong>computational artifact</strong> created by the student.</p>

heading: Week 7 (Programming Focus)
	resource: Lab 1: Introduction to Lists [/bjc-r/cur/teaching-guide/U3/lab-pages/1-introduction-to-lists.html]
	raw-html:<ul><li>3-5 days</li></ul>

heading: Week 8 (Programming Focus)
	resource: Lab 2: Nesting Lists [/bjc-r/cur/teaching-guide/U3/lab-pages/2-nesting-lists.html]
	raw-html:<ul><li>3-5 days</li></ul>
	resource: Lab 3: Three Key List Operations [/bjc-r/cur/teaching-guide/U3/lab-pages/3-three-key-list-operations.html]
	raw-html:<ul><li>5-7 days (continue in Week 9)</li></ul>

heading: Week 9 (Programming Focus)
	resource: Lab 4: Combining List Operations [/bjc-r/cur/teaching-guide/U3/lab-pages/4-combining-list-operations.html]
	raw-html:<ul><li>1-2 days</li></ul>

heading: Week 10 (Social Implications Focus)
	resource: Lab 5: Search [/bjc-r/cur/teaching-guide/U3/lab-pages/5-search.html]
	raw-html:<ul><li>3-4 days</li></ul>

heading: Week 11 (Social Implications Focus)
	resource: Lab 6: Encryption [/bjc-r/cur/teaching-guide/U3/lab-pages/6-encryption.html] 
	raw-html:<ul><li>4-5 days</li></ul>

//heading: Investigations
	//resource: Building Musical Chords [/bjc-r/cur/teaching-guide/U3/Investigations/buiding-musical-chords.html] 
	//resource: Processing a Sentence [/bjc-r/cur/teaching-guide/U3/Investigations/processing-a-sentence.html]  
	//resource: Longest Word [/bjc-r/cur/teaching-guide/U3/Investigations/longest-word.html] 
	//resource: Display Word  [/bjc-r/cur/teaching-guide/U3/Investigations/display-word.html] 
	//resource: Exaggerate [/bjc-r/cur/teaching-guide/U3/Investigations/exaggerate.html] 
	//raw-html: <p>Students can begin work on <a href="http://localhost/bjc-r/cur/programming/3-lists/investigations/chords.html?topic=nyc_bjc%2F3-lists.topic&course=bjc4nyc_2015-2016.html&novideo&noassignment">Building Musical Chords</a> and/or <a href="http://localhost/bjc-r/cur/programming/3-lists/investigations/processing-a-sentence.html?topic=nyc_bjc%2F3-lists.topic&course=bjc4nyc_2015-2016.html&novideo&noassignment">Processing a Sentence</a>, after Lab 1 where they...</p><p>Students can begin work on <a href="http://localhost/bjc-r/cur/programming/3-lists/investigations/longest-word.html?topic=nyc_bjc%2F3-lists.topic&course=bjc4nyc_2015-2016.html&novideo&noassignment">Longest Word</a>, <a href="http://localhost/bjc-r/cur/programming/3-lists/investigations/display-word.html?topic=nyc_bjc%2F3-lists.topic&course=bjc4nyc_2015-2016.html&novideo&noassignment">Display Word</a>, and/or <a href="http://localhost/bjc-r/cur/programming/3-lists/investigations/exaggerate.html?topic=nyc_bjc%2F3-lists.topic&course=bjc4nyc_2015-2016.html&novideo&noassignment">Exaggerate</a>, after Lab 3 where they...</p>	
}
