title: Teaching Guide for Unit 3: Lists

{

h3: Purpose
	raw-html: <p><strong>Programming Focus:</strong> Lists, Abstraction, Higher Order Functions</p>
    	raw-html: <!-- <p>Up to this point, students have seen a few built-in (the technical term is "primitive") data types&mdash;numbers, strings of characters, Boolean values&mdash;but have not yet had the chance to construct their own abstract data types, their own data structures.  When we use the block (picture of blue ask and wait block with "what's your name" in it) and reply "My name is secret" we humans see a structure based on our language, a three-word question and a four-word answer. But the computer sees these both as 17-character strings, making no distinction between letters, spaces, and punctuation, and not recognizing "words" at all. Strings have no internal "structure" beyond the order of the characters. They cannot, for example, be used sensibly to store a list of multiple numbers.</p> --> <p>This unit focuses on lists, an <em>aggregate</em> data type for storing multiple items of any type, including numbers, strings, other lists, or even blocks. Just as functions can take numbers and strings as inputs, they can also take lists as input, or produce lists as output.  A list is an ordered, numbered sequence of items.  Similar data types in other programming languages may be called "arrays," "sequences," or "vectors."</p><p>This unit also offers an optional lab on several powerful list-processing functions, including the <strong>higher-order functions</strong> <code>map</code>, <code>keep</code>, and <code>combine</code>. These functions are called "higher order" because, along with other data, they take functions as inputs.  For example, often a programmer wants to compute some function of each item in a list.  Instead of writing separate procedures such as "take the first letter of each item," "add 3 to each item," etc., the <code>map</code> function generalizes the "... of each item" part, and takes another function as input to specify the "first letter of" or "add 3 to" part.</p><p>One of several design features that distinguishes BJC from other CS Principles curricula is that we emphasize <em>functional</em> programming. One virtue of the higher order list functions is that they generate new lists to report, rather than mutate existing lists.  This is in contrast with the imperative, looping, mutation-based programming that is more common, but more error-prone, in dealing with sequential data. No attention (for now) needs to be placed on the idea of procedures as data; the Snap<em>!</em> visual representation of higher order functions makes the use of a function (rather than the value it reports) as input apparent at a glance. The grey ring that represents a procedure as data is already in the higher order function block, and the user of the higher order function doesn't have to do anything else to make the function itself, rather than a value it reports, be taken as the input.  Near the end of the course, students build these higher order functions for themselves.</p><p>In situations in which imperative programming is needed, we still use a higher order procedure, <code>for each item</code>, a C-shaped block that takes a list and a script to be run for each item in the list.  This avoids the need for index variables.</p>

	raw-html: <p><strong>Social Implications Focus:</strong> Search</p>
		raw-html: <p>The social implications topic in Unit 3 is <em>search</em>. The readings from <em>Blown to Bits</em> describe the underlying technology and also raise questions about risks.  The BJC lab pages focus more on the latter.  The main issues are about user profiling (for serving advertising and for tailoring search results) and about bias in results (profile-based or otherwise). </p>

h3: Big Ideas 2, 3, 4, 5, 7
        raw-html:<p>As students work with lists to manage <strong>data and information (Big Idea 3)</strong>, they use <strong>abstraction (Big Idea 2)</strong>, such as abstract data types, to manage the complexity of datasets. They also create <strong>algorithms (Big Idea 4)</strong> using higher-order functions and implement these algorithms in various <strong>programs (Big Idea 5)</strong> that use lists and list functions.</p>
        raw-html:<p>In the Social Implications Labs, students continue their study of the <strong>global impact (Big Idea 7)</strong> of computing, now by focusing on the impact and storage of user data.</p>
        
h3: Computational Thinking Practices P1, P2, P3, P6
        raw-html:<p>Lists are an important data structure, and learning to think of lists as a single object (rather than many objects) is a way students practice <strong>abstracting (P3)</strong>. We introduce the idea of implementing an abstract data type by writing constructor and selector functions. Students continue to <strong>collaborate (P6)</strong> through pair programming.</p>
        raw-html:<p>Each lab is built around a small "app" project, such as a contact list app, a <strong>computational artifact (P2)</strong> created by the student. This <strong>connects computing (P1)</strong> with the cell phone apps students understand.</p>

h4: Programming Labs
	resource: Lab 1: Introduction to Lists [/bjc-r/cur/teaching-guide/U3/lab-pages/1-introduction-to-lists.html]
	raw-html:<ul><li>2-3 days (105-120 minutes) for required pages</li></ul>

	resource: Lab 2: Nesting Lists [/bjc-r/cur/teaching-guide/U3/lab-pages/2-nesting-lists.html]
	raw-html:<ul><li>2-4 days (80-160 minutes)</li></ul>
	resource: Lab 3: Three Key List Operations (Teacher's Choice) [/bjc-r/cur/teaching-guide/U3/lab-pages/3-three-key-list-operations.html]
	raw-html:<ul><li>If used, 4-7 days (145-290 minutes)</li></ul>

	resource: Lab 4: Combining List Operations (Teacher's Choice) [/bjc-r/cur/teaching-guide/U3/lab-pages/4-combining-list-operations.html]
	raw-html:<ul><li>If used, 2-4 days (75-150 minutes)</li></ul>

h4: Social Implications Labs
	resource: Lab 5: Search [/bjc-r/cur/teaching-guide/U3/lab-pages/5-search.html]
	raw-html:<ul><li>3-4 days (120-180 minutes)</li></ul>
	
	resource: Lab 6: Encryption 
	raw-html:<ul><li>This lab has been <a href="/bjc-r/topic/topic.html?topic=nyc_bjc/2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment">moved to Unit 2</a> as it includes content designed to prepare students for the AP Explore Task.</li></ul>
		

heading: Assessment: Tic Tac Toe Analysis of Abstractions
		raw-html: <p>Students complete and refine their work on the <a href="/bjc-r/cur/programming/3-lists/4-combining-list-ops/2-tic-tac-toe.html">Tic Tac Toe</a> project, describe the purpose of the program (in 100 words or less), and write a description of the <strong><em>abstractions</em></strong> they used (in preparation for the <a href="http://media.collegeboard.com/digitalServices/pdf/ap/ap-computer-science-principles-performance-assessment.pdf#page=3" target="_blank">AP Create Task</a>). <a href="https://docs.google.com/document/d/103MsT0yaGdIdAITs6MrufEv5omXkE8Tygm97T18N2z0/edit?usp=sharing" target="_blank">This Unit 3 Asssessment file</a> includes student-facing instructions and a list of the abstractions students have used in developing this project.
	
}