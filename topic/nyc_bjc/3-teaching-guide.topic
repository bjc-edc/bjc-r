title: Teaching Guide for Unit 3: Lists

{
h3: Purpose
	raw-html: <p><strong>Programming Focus:</strong> Lists, Abstraction</p>
    raw-html: <div class="comment">Terrible purpose statement. Please help me fix it. -JK</div><p>Students work with lists in Unit 3. Students should understand that lists can be treated as a single object. Just as functions can act on a number input or a string input, they can also act on a list input. Students are also introduced to several higher-order functions: <code>map</code>, <code>keep</code>, and <code>combine with</code>. Near the end of the course, students will write their own higher-order functions, including <code>map</code>. But first, they get plenty of experience with using these functions in this Unit. Note that students don't have to understand even what a higher-order function is - at this point, they are just using these blocks, just as they would any other blocks. The social implications topic in Unit 3 is <em>search and data</em> (part 1). In their AP Explore tasks, students will have to describe the role of data in their chosen innovation, and the discussions and activities of Unit 3 are meant to help students write about this topic.</p><div class="todo">Advice from PG: I’d be inclined to write something brief about data types and structures to set a context for mentioning lists and for saying why they are important.  Maybe something like: Up to this point, students have seen a few data types—numbers, strings of characters, Boolean values—but have not yet had the chance to work with data structure.  When we use the block (picture of blue ask and wait block with "what's your name" in it) and reply “My name is secret” we humans see a structure based on our language, a three-word question and a four-word answer. But the computer sees these both as 17-character strings, making no distinction between letters, spaces, and punctuation, and not recognizing “words” at all. Strings have internal “structure” beyond the order of the characters. They cannot, for example, be used sensibly to store a list of numbers. (new paragraph) This unit introduces lists, a very powerful data type that allows one to store numbers, strings, even other lists, even blocks. Just as functions can take numbers and strings as inputs, they can also take lists as inputs. They can also produce lists as output. And lists can be used to construct other powerful data structures such as arrays. (Then maybe some stuff about what the kids do with it?) And maybe add something about structure being “lost” in strings, but preserved in lists.  E.g.: When students used (pic of join block with "boss" "es" inside) to create “bosses,” the seam between those two joined strings is lost. Though a human can say where to slice that six-character string to reverse the process, the computer has no way to tell whether the original components were “bo” and “sses” OR “b” and “osse” and “s” OR “boss” and “es.” </div>
	raw-html: <p><strong>Social Implications Focus:</strong> Search and Data Part I</p>
	raw-html: <p></p>

h3: Highlighting Computational Thinking
	raw-html: <div class="comment">Weak.</div><p>Lists are an important representation of data, and thinking of lists as a single object (rather than a collection of objects) is a way students practice <strong>abstracting</strong>. Students continue to <strong>collaborate</strong> through pair programming.</p>

heading: Week 9 (Programming Focus)
	resource: Lab 1: Introduction to Lists [/bjc-r/cur/teaching-guide/U3/Week09/1-introduction-to-lists.html]
	resource: Lab 2: List Operations [/bjc-r/cur/teaching-guide/U3/Week09/2-list-operations.html]
	resource: Additional Problems/Activities [/bjc-r/cur/teaching-guide/U3/Week09/activities.html]
	resource: Homework Assignments [/bjc-r/cur/teaching-guide/U3/Week09/assignments.html]

heading: Week 10 (Programming Focus)
	resource: Lab 3: Using Higher-Order Functions [/bjc-r/cur/teaching-guide/U3/Week10/3-using-higher-order-functions.html]
	resource: Lab 4: Magic Squares [/bjc-r/cur/teaching-guide/U3/Week10/4-magic-squares.html]
	resource: Additional Problems/Activities [/bjc-r/cur/teaching-guide/U3/Week10/activities.html]
	resource: Homework Assignments [/bjc-r/cur/teaching-guide/U3/Week10/assignments.html]

heading: Week 11 (Programming Focus)
	resource: Lab 5: Data Part I [/bjc-r/cur/teaching-guide/U3/Week11/5-data-part-I.html]
	resource: Additional Problems/Activities [/bjc-r/cur/teaching-guide/U3/Week11/activities.html]
	resource: Homework Assignments [/bjc-r/cur/teaching-guide/U3/Week11/assignments.html]

heading: Week 12 (Social Implications Focus)
	resource: Lab 5: Search and How the Internet Works [/bjc-r/cur/teaching-guide/U2/Week12/5-search-how-internet-works.html]
	resource: Additional Problems/Activities [/bjc-r/cur/teaching-guide/U3/Week12/activities.html]
	resource: Homework Assignments [/bjc-r/cur/teaching-guide/U3/Week12/assignments.html] 
	
heading: Week 13 (Social Implications Focus)
	resource: Lab 6: Encryption and Security [/bjc-r/cur/teaching-guide/U3/Week13/6-encryption-security.html] 
	resource: Additional Problems/Activities [/bjc-r/cur/teaching-guide/U3/Week13/activities.html]
	resource: Homework Assignments [/bjc-r/cur/teaching-guide/U3/Week13/assignments.html]
	
heading: Investigations
	resource: Building Musical Chords [/bjc-r/cur/teaching-guide/U3/Investigations/buiding-musical-chords.html] 
	resource: Processing a Sentence [/bjc-r/cur/teaching-guide/U3/Investigations/processing-a-sentence.html]  
	resource: Longest Word [/bjc-r/cur/teaching-guide/U3/Investigations/longest-word.html] 
	resource: Display Word  [/bjc-r/cur/teaching-guide/U3/Investigations/display-word.html] 
	resource: Exaggerate [/bjc-r/cur/teaching-guide/U3/Investigations/exaggerate.html] 
		
}