title: Teaching Guide for Unit 3: Data Structures

{

h3: Purpose
	raw-html: <p><strong>Programming Focus:</strong> Complexity and Abstraction, Lists and Higher Order Functions</p>
		raw-html:<p>This unit continues the study of abstraction as the means to control complexity.  Lab 1 explores several examples of complexity in different contexts.  Labs 2 and 3 focus on two applications of lists, an <em>aggregate</em> data type for storing multiple items of any type, including numbers, strings, other lists, or even blocks and scripts. Just as functions can take numbers and strings as inputs, they can also take lists as input, or produce lists as output.  A list is an ordered, numbered sequence of items.  Similar data types in other programming languages may be called "arrays," "sequences," or "vectors."</p><p>Our approach to lists emphasizes the use of the <strong>higher-order functions</strong> <code>map</code>, <code>keep</code>, and <code>combine</code>, which allow programmers to think about a list as a single value, rather than looping explicitly through the items in the list one at a time. These functions are called "higher order" because, along with other data, they take functions as inputs.  For example, often a programmer wants to compute some function of each item in a list.  Instead of writing separate procedures such as "take the first letter of each item," "add 3 to each item," etc., the <code>map</code> function generalizes the "... of each item" part, and takes another function as input to specify the "first letter of" or "add 3 to" part.</p><p>One of several design features that distinguishes BJC from other CS Principles curricula is that we emphasize <em>functional</em> programming. One virtue of the higher order list functions is that they generate new lists to report, rather than mutate existing lists.  This is in contrast with the imperative, looping, mutation-based programming that is more common, but more error-prone, in dealing with sequential data. No attention (for now) needs to be placed on the idea of procedures as data; the Snap<em>!</em> visual representation of higher order functions makes the use of a function (rather than the value it reports) as input apparent at a glance. The grey ring that represents a procedure as data is already in the higher order function block, and the user of the higher order function doesn't have to do anything else to make the function itself, rather than a value it reports, be taken as the input.  Near the end of the course, students build these higher order functions for themselves.</p><p>In situations in which imperative programming is needed, we still use a higher order procedure, <code>for each item</code>, a C-shaped block that takes a list and a script to be run for each item in the list.  This avoids the need for index variables.</p>
		raw-html: <p>The problems students are expected to solve in this unit are harder than what they saw in the first two units.  It may be a good idea to tell students to expect that.  Nothing in the unit requires superhuman programming ability, but we expect that students will have to struggle to understand the ideas.  Don't let them think that means they're not smart enough.</p>

	raw-html: <p><strong>Social Implications Focus:</strong> Robots and AI</p>
		//raw-html: <p>The social implications topic in Unit 3 is <em>search</em>. The readings from <em>Blown to Bits</em> describe the underlying technology and also raise questions about risks.  The BJC lab pages focus more on the latter.  The main issues are about user profiling (for serving advertising and for tailoring search results) and about bias in results (profile-based or otherwise). </p>
		//raw-html:<div class="todo">from U2: they also examine communications technology and ways that computing impacts community (including cyberbullying). Students then learn about encryption, including message encoding and decoding, ciphers, RSA encryption and encryption politics, and cryptography innovations. While we do emphasize how revolutionary public key cryptography has been, the main emphasis is on how the various social stakeholders view the question of strong encryption of user data.</div>
		raw-html: <p>Students are introduced to some ideas and issues in artificial intelligence and discuss the challenges and consequences of this technology.  As always, we discourage "is X good or bad?" questions, and instead encourage "What's good about X?  What's bad about it?  How can we change the design of X or of its social context to make it better?"</p>

h3: Big Ideas 2, 3, 4, 5, 7
        raw-html:<p>As students work with lists to manage <strong>data and information (Big Idea 3)</strong>, they use <strong>abstraction (Big Idea 2)</strong>, such as abstract data types, to manage the complexity of datasets. They also create <strong>algorithms (Big Idea 4)</strong> using higher-order functions and implement these algorithms in various <strong>programs (Big Idea 5)</strong> that use lists and list functions.</p>
        raw-html:<p>In the Social Implications Labs, students continue their study of the <strong>global impact (Big Idea 7)</strong> of computing, now by focusing on the impact of machine learning and robotics.</p>
        
h3: Computational Thinking Practices P1, P2, P3, P6
        raw-html:<p>Lists are an important data structure, and learning to think of lists as a single object (rather than many objects) is a way students practice <strong>abstracting (P3)</strong>. We advance the idea of abstract data types by creating more complex, nested ADTs. Students continue to <strong>collaborate (P6)</strong> through pair programming.</p>
        raw-html:<p>Several labs are built around a small "app" project, such as a contact list app or augmenting their Tic Tac Toe game, a <strong>computational artifact (P2)</strong> created by the student. This <strong>connects computing (P1)</strong> with the apps and games students are already familiar with.</p>

h3: Student Labs
	raw-html:<div class="commentBig"><div class="todo">Can this be cut now? --MF, 8/31/19<br />No, let's move it to U5 optional projects or something. -bh</div>Teachers who used BJC during the summer of 2017 may notice that the Sorting Data lab has been removed. If you still wish to use this lab, you can find the content here:<ul><li><a href="/bjc-r/cur/programming/3-lists/old/2-sorting/1-recursion.html" target="_blank">Sorting Data page 1: Recursion Revisited</a></li><li><a href="/bjc-r/cur/programming/3-lists/old/2-sorting/2-selection-sort.html" target="_blank">Sorting Data page 2: Selection Sort</a></li><li><a href="/bjc-r/cur/programming/3-lists/old/2-sorting/3-sort-by-name.html" target="_blank">Sorting Data page 3: Sorting Contacts by Name</a></li><li><a href="/bjc-r/cur/teaching-guide/U3/old/2-sorting-data.html" target="_blank">Teacher Guide for Sorting Data</a></li></ul></div>
	resource: Lab 1: Dealing with Complexity [/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html]
	raw-html:<ul><li>4-6 days (175-270 minutes) for required pages</li></ul>
	resource: Lab 2: Contact List [/bjc-r/cur/teaching-guide/U3/lab-pages/2-contact-list.html]
	raw-html:<ul><li>2-4 days (75-140 minutes)</li></ul>
	//resource: Lab 2: Sorting Data [/bjc-r/cur/teaching-guide/U3/lab-pages/2-sorting-data.html]
	//raw-html:<ul><li>3-5 days (95-190 minutes)</li></ul>
	resource: Lab 3: Tic-Tac-Toe [/bjc-r/cur/teaching-guide/U3/lab-pages/3-tic-tac-toe.html]
	raw-html:<ul><li>no required pages</li></ul>
	resource: Lab 4: Robots and Artificial Intelligence [/bjc-r/cur/teaching-guide/U3/lab-pages/4-robots-ai.html]
	raw-html:<ul><li>4-8 days (150-330 minutes)</li></ul>
	resource: Optional Projects [/bjc-r/cur/teaching-guide/U3/lab-pages/U3-optional-projects.html]
	
//h3: OLD Labs
	//resource: Lab 1: Introduction to Lists [/bjc-r/cur/teaching-guide/U3/old/1-introduction-to-lists.html]
	//raw-html:<ul><li>2-3 days (105-120 minutes) for required pages</li></ul>
	//resource: Lab 2: Nesting Lists [/bjc-r/cur/teaching-guide/U3/old/2-nesting-lists.html]
	//raw-html:<ul><li>2-4 days (80-160 minutes)</li></ul>
	//resource: Lab 3: Three Key List Operations (Teacher's Choice) [/bjc-r/cur/teaching-guide/U3/old/3-three-key-list-operations.html]
	//raw-html:<ul><li>If used, 4-7 days (145-290 minutes)</li></ul>
	//resource: Lab 4: Combining List Operations (Teacher's Choice) [/bjc-r/cur/teaching-guide/U3/old/4-combining-list-operations.html]
	//raw-html:<ul><li>If used, 2-4 days (75-150 minutes)</li></ul>
	//resource: Lab 5: Robots and Artificial Intelligence [/bjc-r/cur/teaching-guide/U8/lab-pages/5-robots-and-ai.html]
	//raw-html:<ul><li>1-5 days (150-330 minutes)</li></ul>
	//resource: Lab 6: Data and Functions [/bjc-r/cur/teaching-guide/U5/lab-pages/2-graphing-data-functions.html]
	//raw-html:<ul><li>1-2 days (30-90 minutes) for required pages</li></ul>
	
h3: AP Classroom
    raw-html: <p>After Unit 3, the following AP CSP topics have been covered completely. You may choose to use the <a href="https://myap.collegeboard.org/login" title="AP Classroom" target="_blank">AP Classroom</a> formative assessment practice questions for the following topics:<ul>
    raw-html: <li><strong>3.2 Data Abstraction</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/2-data-art.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 2: Making Lists">Unit 2 Lab 2: Making Lists</a>; <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 3: Making Decisions">Unit 2 Lab 3: Making Decisions</a>; and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/2-contact-list.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 2: Contact List">Unit 3 Lab 2: Contact List</a>)</li>
    raw-html: <li><strong>3.3 Mathematical Expressions</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/1-variables-games.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 1: Making Games">Unit 2 Lab 1: Making Games</a>; <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 3: Making Decisions">Unit 2 Lab 3: Making Decisions</a>; <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/4-making-computers-do-math.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 4: Making Computers Do Math">Unit 2 Lab 4: Making Computers Do Math</a>; and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 1: Dealing with Complexity">Unit 3 Lab 1: Dealing with Complexity</a>)</li>
    raw-html: <li><strong>3.6 Conditionals</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 3: Making Decisions">Unit 2 Lab 3: Making Decisions</a>; <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/4-making-computers-do-math.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 4: Making Computers Do Math">Unit 2 Lab 4: Making Computers Do Math</a>; and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 1: Dealing with Complexity">Unit 3 Lab 1: Dealing with Complexity</a>)</li>
    raw-html: <li><strong>3.8 Iteration</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/2-data-art.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 2: Making Lists">Unit 2 Lab 2: Making Lists</a> and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 1: Dealing with Complexity">Unit 3 Lab 1: Dealing with Complexity</a>)</li>
    raw-html: <li><strong>3.9 Developing Algorithms</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/3-predicates-game.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 3: Making Decisions">Unit 2 Lab 3: Making Decisions</a>; <a href="/bjc-r/cur/teaching-guide/U2/lab-pages/4-making-computers-do-math.html?topic=nyc_bjc%2F2-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 2 Lab 4: Making Computers Do Math">Unit 2 Lab 4: Making Computers Do Math</a>; and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 1: Dealing with Complexity">Unit 3 Lab 1: Dealing with Complexity</a>)</li>
    raw-html: <li><strong>3.13 Developing Procedures</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/1-layers-abstraction.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 1: Dealing with Complexity">Unit 3 Lab 1: Dealing with Complexity</a> and <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/2-contact-list.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 2: Contact List">Unit 3 Lab 2: Contact List</a>)</li>
    raw-html: <li><strong>5.3 Computing Bias</strong> (covered in <a href="/bjc-r/cur/teaching-guide/U3/lab-pages/4-robots-ai.html?topic=nyc_bjc%2F3-teaching-guide.topic&course=bjc4nyc_teacher.html&novideo&noassignment" title="Unit 3 Lab 4: Robots and Artificial Intelligence">Unit 3 Lab 4: Robots and Artificial Intelligence</a>)</li>
    raw-html: </ul></p>

h3: Assessment: Tic Tac Toe Analysis of Abstractions
		raw-html: <p>Students complete and refine their work on the Tic-Tac-Toe project, describe the purpose of the program (in 100 words or less), and write a description of the <strong><em>abstractions</em></strong> they used (in preparation for the <a href="http://media.collegeboard.com/digitalServices/pdf/ap/ap-computer-science-principles-performance-assessment.pdf#page=3" target="_blank">AP Create Task</a>). <a href="https://docs.google.com/document/d/103MsT0yaGdIdAITs6MrufEv5omXkE8Tygm97T18N2z0/edit?usp=sharing" target="_blank">This Unit 3 Asssessment file</a> includes student-facing instructions and a list of the abstractions students have used in developing this project.
	
}
