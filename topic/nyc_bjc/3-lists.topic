title: Unit 3: Lists
{
// h1: Formerly Topic 5: Collecting Data into Lists

// h2: Big Ideas
// big-idea: Understand the meaning of Turing Completeness.
// big-idea: Understand the concept of recursion.
// big-idea: Explore privacy issues related to the widespread unchecked dissemination of digital information.

//	video: Programming Paradigms (Dan Garcia) [https://coursesharing.org/courses/6/lectures/13]
//	video: Recursion 1 [https://coursesharing.org/courses/6/lectures/17]
//	video: Social Implications 1 [http://youtu.be/v_tOSw-vhug]
//	reading: Blown to Bits, Chapter 3 [http://www.bitsbook.com/wp-content/uploads/2008/12/chapter3.pdf]

// h2: Activities
// learning-goal: Practice writing and reading functions with different input types.
// learning-goal: Determine how to break problems down into individual functions.
// learning-goal: Gain experience working with a new data structure and the large repository of blocks that work on this data structure.
// learning-goal: Develop the techniques and functions to draw a game board.

heading: Programming Lab 1: Introduction to Lists
	 resource: Getting Started [/bjc-r/cur/programming/3-lists/1-introduction-to-lists/1-getting-started.html]
     quiz: Check: Lists [/bjc-r/cur/programming/3-lists/1-introduction-to-lists/2-lists-self-test.html]
	 resource: Sentence Builder  [/bjc-r/cur/programming/3-lists/1-introduction-to-lists/3-sentence-builder.html]

heading: Programming Lab 2: List Operations
	 resource: Getting Started [/bjc-r/cur/programming/3-lists/2-list-operations/4-getting-started.html]
	 resource: Map [/bjc-r/cur/programming/3-lists/2-list-operations/4-map.html]
	 resource: Keep [/bjc-r/cur/programming/3-lists/2-list-operations/5-keep.html]
	 resource: Combine [/bjc-r/cur/programming/3-lists/2-list-operations/6-combine.html]
	 quiz: Check: Map, Keep, and Combine [/bjc-r/cur/programming/3-lists/2-list-operations/7-hof-self-test.html]

heading: Programming Lab 3: Using Higher-Order Functions
	 resource: Composing Higher-Order Functions [/bjc-r/cur/programming/3-lists/3-using-hof/7-composing-higher-order-functions.html]
	 resource: Acronym Generator [/bjc-r/cur/programming/3-lists/3-using-hof/8-acronym-generator.html]
	 resource: When You Really Have to Loop [/bjc-r/cur/programming/3-lists/3-using-hof/9-when-you-really-have-to-loop.html]

//heading: Lists and Sentences: The Index Variable Pattern

heading: Programming Lab 4: Magic Squares
	 resource: Getting Started [/bjc-r/cur/programming/3-lists/4-magic-square/getting-started.html]
	 resource: Introducing Triples [/bjc-r/cur/programming/3-lists/4-magic-square/finding-triples.html]
	 resource: Triples [/bjc-r/cur/programming/3-lists/4-magic-square/finding-triples-2.html]
	 resource: Finding All The Triples [/bjc-r/cur/programming/3-lists/4-magic-square/finding-triples-3.html]
	 resource: Finishing Touches [/bjc-r/cur/programming/3-lists/4-magic-square/finishing-touches.html]

heading: Social Implications Lab 5: Search and Data Part I
 	 resource: Big Questions [/bjc-r/cur/programming/3-lists/5-search-and-data/big-questions.html]
	 resource: Spam and Ham [/bjc-r/cur/programming/3-lists/5-search-and-data/spam-introduction.html]

heading: Investigations
	 resource: Processing a Sentence (Use after Lab 1) [/bjc-r/cur/programming/3-lists/investigations/processing-a-sentence.html]
 	 resource: Longest Word (Use after Lab 3) [/bjc-r/cur/programming/3-lists/investigations/longest-word.html]
 	 resource: Display Word (Use after Lab 3) [/bjc-r/cur/programming/3-lists/investigations/display-word.html]
 	 resource: Exaggerate (Use after Lab 3) [/bjc-r/cur/programming/3-lists/investigations/exaggerate.html]



// heading: List Mutation  // this has moved to Chapter 4
//	resource: Swap Two List Values [/bjc-r/cur/programming/lists/intro/swap-two-list-values.html]
//	resource: Mutation of Variables [/bjc-r/cur/programming/lists/mutation/mutate-vars.html]


assignment: (Due Later) Hangman Classic [/bjc-r/cur/programming/projects/hangman/hangman-classic.html]

// h1: Formerly Topic 13: Practicing with Lists: Tic-Tac-Toe
// h2: Big Ideas


// 	video: Recursion 2 [https://coursesharing.org/courses/6/lectures/19]
// 	video: Social Implications 2 [https://coursesharing.org/courses/6/lectures/20]
// 	reading: Blown to Bits, Chapter 4 [http://www.bitsbook.com/wp-content/uploads/2008/12/chapter4.pdf]

// h2: Activities
// learning-goal: Get more practice with lists and higher order functions used in combination.
// learning-goal: Develop a significant-sized project.

// heading: Tic-Tac-Toe strategy // this has moved to Chapter 4
//	 resource: Tic-Tac-Toe: Introduction [/bjc-r/cur/programming/lists/hof/ttt/01-intro.html]
//	 resource: Program Structure and Strategy [/bjc-r/cur/programming/lists/hof/ttt/02-strategy.html]
//	 resource: Finding Triples [/bjc-r/cur/programming/lists/hof/ttt/03-triples.html]
//	 resource: Finding Triples (Continued) [/bjc-r/cur/programming/lists/hof/ttt/04-triples2.html]
//	 resource: Find a Winning Square [/bjc-r/cur/programming/lists/hof/ttt/05-winning-square.html]
//	 resource: Blocking the Opponent [/bjc-r/cur/programming/lists/hof/ttt/06-block-opponent.html]
//	 resource: Best Free Square  [/bjc-r/cur/programming/lists/hof/ttt/07-best-free.html]
	 //resource: Make the Game Interactive [/bjc-r/cur/programming/lists/hof/ttt/08-interactive.html] // this has been given in new starter file
//	 resource: Improving the Strategy  [/bjc-r/cur/programming/lists/hof/ttt/09-improving.html]

}
