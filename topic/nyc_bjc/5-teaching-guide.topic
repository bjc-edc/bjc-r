title: Teaching Guide for Unit 5: Algorithms and Data

{
	raw-html:<div class="takeNote">Please note: This unit is currently under development.</div>

h3: Purpose
	
	raw-html: <div class="comment"><h4>Dev Links</h4><p><a href="/bjc-r/cur/programming/5-algorithms/APinU5.html">AP Standards List of U5</a></p><p><a href="/bjc-r/topic/topic.html?topic=nyc_bjc/5-algorithms.topic&course=bjc4nyc_2015-2016.html&novideo&noassignment">U5 Student Lab Pages</a></p></div>

	raw-html: <p><strong>Programming Focus:</strong> This unit focuses on several types of analysis: analysis of problems to generate algorithms for their solution; analysis of the algorithms, especially of the time it takes to execute them, to optimize them; analysis of phenomena to generate models and simulations that give insight and help one generate and test hypotheses; and analysis of data, especially including visualization.</p>
    raw-html: <p>Students have been generating algorithms to solve problems from the start of this course, but have not yet focused on analyzing them for efficiency. For small enough computational problems, such analysis isn't needed. But modeling complex phenomena and handling large data sets requires understanding that there are sometimes alternative algorithms that reduce the impact of the size of a model on the time it takes to execute. In-depth coverage of this broad domain (computational complexity, data analysis, modeling and simulation) is beyond the scope of an introductory course, but Unit 5's projects in each of these areas will give students a good first-approximation understanding of these issues. </p>

	raw-html: <p><strong>Social Implications Focus:</strong> Copyrights and Patents</p>
	raw-html: <p>Students learn the meaning of copyrights and patents, discuss their impact and relevance in an increasingly computationally mediated world, and learn about the simultaneous invention of the telephone. </p>

h3: Highlighting Computational Thinking
	raw-html: <p>Students <strong>create</strong> several <strong>computational artifacts</strong> including a program for graphing data and functions, a simulation of traffic flow that lets them analyze traffic behavior on a highway, and an extension of a game from Unit 2. Students analyze problems (e.g., the traffic flow, list searching algorithms, and data scaling) to create suitable algorithms for solving them, and they create a timer program to help them <strong>analyze programs</strong> for their computational efficiency. Students continue to <strong>connect computing</strong> to the human experience in two contexts: through the data analysis and traffic simulation; and as they learn about copyrights, patents, and the simultaneous inventions. Students continue to <strong>communicate</strong> and <strong>collaborate</strong> through pair programming.</p>
	raw-html:<div class="todo"><h3>Old Learning Goals to be integrated into TG lab pages as "Students will" or else cut as dismissed:</h3><ul><li>Solidify understanding of what an algorithm is and why they're important to computer science and other fields.</li><li>Gain a basic understanding of why certain algorithms perform better than others.</li><li>There's often more than one way to solve the same problem. Certain solutions will be superior to others, but very often choosing a solution will require evaluating a list of trade-offs relevant to your particular situation.</li><li>Practice implementing algorithms that were discussed verbally.</li><li>Memoization is a technique that can be used for improving the performance of algorithms with repeated calculations at the expense of a higher memory requirement.</li><li>Hiding algorithmic details behind a layer of abstraction makes it easier to upgrade or adjust your implementation in the future.</li><li>Use the <span class="snap">snap</span>  timer to gather run time information</li><li>Observe the difference between constant, linear, quadratic and logarithmic run times.</li></ul><h3>Old Big Ideas:</h3><ul><li>Explore how to analyze algorithmic speed and understand various factors that contribute to slow or fast runtimes.</li><li>Explore the implications of a world increasingly controlled by algorithms.</li></ul><h3>Old Videos, again delete any of this as it is deemed unneeded</h3><ul><li><a href="https://coursesharing.org/courses/6/lectures/14" target="_blank">video: Algorithms</a></li><li><a href="http://www.youtube.com/embed/ENWVRcMGDoU" target="_blank">How Algorithms Shape Our World</a></li></ul></div>

heading: Programming Labs
	resource: Lab 1: Algorithms [/bjc-r/cur/teaching-guide/U5/lab-pages/1-algorithms.html]
	resource: Lab 2: Graphing Data and Functions [/bjc-r/cur/teaching-guide/U5/lab-pages/2-graphing-data-functions.html]
	resource: Lab 3: Timing Experiments [/bjc-r/cur/teaching-guide/U5/lab-pages/3-timing-experiments.html]
	resource: Lab 4: Unsolvable and Undecidable Problems [/bjc-r/cur/teaching-guide/U5/lab-pages/4-unsolvable-undecidable-problems.html]
	resource: Lab 5: Data Processing [/bjc-r/cur/teaching-guide/U5/lab-pages/5-data-processing.html]
	resource: Lab 6: Traffic Simulation [/bjc-r/cur/teaching-guide/U5/lab-pages/6-traffic-simulation.html]

heading: Social Implications Labs
	resource: Lab 7: Copyrights and Patents [/bjc-r/cur/teaching-guide/U5/lab-pages/7-copyright-media-sharing-patents.html]
	