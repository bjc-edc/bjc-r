title: Teaching Guide for Unit 7: Fractals and Recursion

{

h3: Purpose
	raw-html:<p><strong>Programming Focus:</strong> Recursion, Abstraction, Fractals</p>
		raw-html:<div class="comment"><p><a href="/bjc-r/cur/teaching-guide/U6/old/u5-main.html?course=bjc4nyc_2015-2016_teacher.html&novideo&noassignment">Old Recursion TG</a></p><p><a href="/bjc-r/topic/topic.html?topic=nyc_bjc/6-recursion-trees-fractals.topic&course=bjc4nyc_2015-2016.html&novideo&noassignment">U6 Student Labs</a></p></div>
		raw-html:<p>Recursion and functional programming are two programming techniques that go beyond the Framework requirements but they are fundamental to learning to program.  Functional programming was introduced in Unit 3, and we'll return to it in Unit 8.  Unit 7 is about recursive commands, mainly fractals. <img class="imageRight noshadow" src="/bjc-r/img/6-recursion/vee-simple.png" alt="V shape with decorations" title="V shape with decorations" /> It starts with a teacher demonstration of the Vee project, in which a short program  generates V-shapes with randomly chosen decorations at the ends (shown right).</p><p><img class="imageLeft noshadow" src="/bjc-r/img/6-recursion/vee-complex.png" alt="vee calling vee" title="vee calling vee" />The same program suddenly generates arbitrarily complex results if the <code>vee</code> procedure itself is added to the list of possible decorations (shown left). This is a teacher demonstration rather than an independent lab activity because the collective "gasp!" of the class is itself a valuable learning experience.</p><p><img class="imageRight noshadow" src="/bjc-r/img/6-recursion/recursive-tree.gif" alt="Tree Fractal" title="Tree Fractal" />After the demonstration, students develop their own <em>non-recursive</em> fractal tree program by building up from small cases (a one-level tree is just a trunk; a two-level tree is a trunk with two branches, etc.) so that they are not confronted at first with the seeming magic of a procedure calling itself. Only after they've written several almost-identical procedures (<code>tree 2</code>, <code>tree 3</code>, <code>tree 4</code>, etc.) does the lab suggest combining them into one <em>recursive</em> procedure, <code>tree</code>. The students then discover why recursive procedures need a <em>base case</em> to terminate the recursion (comparable to their <code>tree 1</code> block in the non-recursive scheme that draws just one line without calling for any branches).</p><p>Once the tree fractal is thoroughly understood, students go on to construct other common fractals (Koch snowflake, Sierpinski gasket, etc.) in Lab 2.</p><p>The elegance of the programs themselves helps students see computer programs&mdash;and not just the effects they produce&mdash;as things of beauty. A key moment in developing that sense is when students understand how a short recursive procedure can generate a deeply complex computational process.</p>
	raw-html:<p><strong>Social Implications Focus:</strong> Impacts of Computing on Work and War</p>
		raw-html:<p>This unit also contains Social Implications labs exploring the effects of computers on jobs (including both the displacement of old categories of work by new ones and the on-the-job experience of workers whose output is measured by computers) and on warfare (with an emphasis on drones and why they make a qualitative difference in the political cost of war).</p>
	
h3: Big Ideas 2, 4, 5, 7
        raw-html:<p>In first two labs, students <strong>program (Big Idea 5)</strong> various recursive projects, learning to recognize and use the general structure of a recursive <strong>algorithm (Big Idea 4)</strong>, including the base case and the recursive case that calls the script itself. Until now, students have used <strong>abstraction (Big Idea 2)</strong> as they encapsulate a piece of code in a procedure and call that procedure in other places; now with recursion, they call a piece of code <em>within itself</em>.</p><p>In the last two labs, students focus on the <strong>global impact (Big Idea 7)</strong> of computing on the workplace and on warfare.</p>
        
h3: Computational Thinking Practices P1, P2, P3, P4, P6
        raw-html:<p>Students create several <strong>computational artifacts (P2)</strong> including several fractal projects and a project that generates Mondrian-style drawings. They practice <strong>abstracting (P3)</strong> as they learn about recursion. And they <strong>analyze problems and artifacts (P4)</strong> as they determine how to construct code to generate fractal structures by analyzing images of the intended results. As in other units, they continue to <strong>collaborate (P6)</strong> through pair programing.</p> <p>Students also <strong>connect computing (P1)</strong> to the real world in their investigations of work and war.</p>

h3: edX BJC Videos
		raw-html:<p>There are a number of BJC videos from the edX version of the curriculum that are relevant to Unit 7. These are available on the <a href="/bjc-r/cur/teaching-guide/resources/video-list.html">edX BJC Videos</a> page.</p>

h3: Student Labs
	resource: Lab 1: Trees in a Forest [/bjc-r/cur/teaching-guide/U7/lab-pages/1-trees-in-a-forest.html]
	raw-html:<ul><li>2-3 days (75-140 minutes)</li></ul>
	resource: Lab 2: Recursion Projects [/bjc-r/cur/teaching-guide/U7/lab-pages/2-recursion-projects.html]
	raw-html:<ul><li>3-4 days (115-175 minutes)</li></ul>
	
}
