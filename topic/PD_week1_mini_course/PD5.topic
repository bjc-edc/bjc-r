title: Unit 5: Algorithms and Data
{
//	raw-html: <div class="comment"><h4>Dev Links</h4><p><a href="/bjc-r/cur/programming/5-algorithms/APinU5.html">AP Standards List of U5</a></p><p><a href="/bjc-r/topic/topic.html?topic=nyc_bjc/5-teaching-guide.topic&course=bjc4nyc_2015-2016_teacher.html&novideo&noassignment">U5 Teacher Guide</a></p></div>

heading: Programming Lab 1: Algorithms
	resource: Searching a Sorted List [/bjc-r/cur/programming/5-algorithms/1-searching-lists/1-sorted-lists.html]
	resource: Analyzing and Improving Searches [/bjc-r/cur/programming/5-algorithms/1-searching-lists/2-improving-search.html]
	//raw-html: <p>Students add to their <a href="/bjc-r/cur/programming/2-conditionals-abstraction-testing/3-building-more-complex-blocks/2-abstraction-developing-a-number-guessing-game.html?topic=nyc_bjc%2F2-conditionals-abstraction.topic&course=bjc4nyc_2015-2016.html&novideo&noassignment">U2L3-GuessNumber</a> project and: <ol><li> Write a block that lets you play the guessing game with the computer (it picks the number and tells you whether you are too high or low).  Develop a strategy. (4 guesses, numbers 1-16)</li><li>Write a block that lets the computer play the guessing game with the you (you pick  the number and tell  the computer whether it is too high or low), using the strategy you developed in 1.</li><li>Write a block that finds a specific number in an ordered list of numbers and reports its position.</li><li>If the list is unordered, what can you do?</li></ol></p><h4>Existing Lab Pages:</h4>

heading: Programming Lab 2: Graphing Data and Functions
	//raw-html: <p>Students create a <strong>grapher</strong> program that takes either a function or a list of data points as input and produces its Cartesian graph.  <div class="todo">Paul has written an example, and we can give students pieces of that.</div></p>
	resource: Building a Graphing App [/bjc-r/cur/programming/5-algorithms/2-graphing/1-building-a-grapher.html]
	resource: Improving Your Grapher [/bjc-r/cur/programming/5-algorithms/2-graphing/2-improving-a-grapher.html]
	resource: Graphing Functions [/bjc-r/cur/programming/5-algorithms/2-graphing/3-graphing-functions.html]

heading: Programming Lab 3: Timing Experiments
	raw-html: <div class="todo"><p><ol><li>Time several functions, starting with ones that take non-linear time.  Graph the times against the size of the inputs. </li><li>Write a {\bf timer} program that accepts a function (and inputs) and times the computation in milliseconds.  Graph {\bf timer} with several different inputs.  Try to create different kinds of graphs.</li><li>Experiment with various functions and with different models of the same function.</li><li>Time the guessing game strategy that was developed earlier. </li><li>Time the ``number finder'' strategy that was developed earlier.</li></ol><ul><li>things that have to end up taught here: linear, quadratic, exponential</li><li>maybe log?  maybe n log n?  Talk about how order trumps constant factor.  Bentley.</li><li>FedEx problem</li></ul></p><h4>Existing Lab Pages:</h4> </div>
	resource: Timing a Reporter [/bjc-r/cur/programming/5-algorithms/3-timing-experiments/1-timing-a-reporter.html]
	resource: Comparing Search Algorithms [/bjc-r/cur/programming/5-algorithms/3-timing-experiments/2-comparing-search-algorithms.html]
	resource: Timing Reporters [/bjc-r/cur/programming/5-algorithms/3-timing-experiments/3-timing-reporters.html]
	resource: Classifying Reporters [/bjc-r/cur/programming/5-algorithms/3-timing-experiments/4-classifying-reporters.html]
	raw-html: <div class="todo">JK: I wonder, during the data parts of this unit, if the following articles might be useful: <a href="http://webdocs.cs.ualberta.ca/~zaiane/courses/cmput690/notes/Chapter1/ch1.pdf">Pages 1-3 of this article about data mining</a> (The article goes on to describe the processes invovled in data mining, the kinds of data that can be mined, and the kind of information that can be discovered from data mining.) or <a href="http://www.technologyreview.com/news/513016/how-wireless-carriers-are-monetizing-your-movements/">How Wireless Carriers are Monetizing Your Movements</a>. I had also thought of the following possible discussion questions: What opportunities are provided by large data sets? What challenges are presented by them?</div>
	
heading: Programming Lab 4: Unsolvable and Undecidable Problems
//	raw-html: <div class="todo">From Dan: <ul><li>Given a ton of card decks, have the class figure out the fastest INDIVIDUAL time to start from a shuffled deck to a sorted deck (students can choose what “in order” means for that, but it has to be a unique order, so “reds in front of blacks” isn’t enough — people always choose to sort by either rank or suit).  Talk about the different algorithms that evolved, and what were fastest.</li><li>Tell the class they can work as a TEAM to sort a shuffled desk the fastest.  The teams can be any size. Let them continue to adjust the algorithms and sizes of teams and personnel on the teams to achieve the fastest scores.  Talk about the different algorithms that evolved, and what were fastest.</li></ul>This is a great introduction to concurrent algorithms, and allows the kids to come up with algorithms on their own, and builds team spirit. It’s really fun and useful to plot the fastest times vs the number of players, and talk about amdahl’s law. (Added in by MF) Brian suggested the placement in the middle of Lab 2.</div>
	resource: Logical Inconsistency [/bjc-r/cur/programming/5-algorithms/4-unsolvable-undecidable/1-logical-inconsistency.html]
	resource: An Undecidable Problem [/bjc-r/cur/programming/5-algorithms/4-unsolvable-undecidable/2-halting-problem.html]

heading: Programming Lab 5: Data Processing
	raw-html: <div class="todo"><p><ol><li>Possible investigation:  Benford's law.</li><li>Consider revewing: <a href="http://oceansofdata.org/our-work" target="_blank">http://oceansofdata.org/our-work</a> </li><li>Google’s CSP Datasets  <a href="https://www.google.com/publicdata/directory" target="_blank">https://www.google.com/publicdata/directory</a></li><li><a href="https://en.wikipedia.org/wiki/List_of_online_databases" target="_blank">https://en.wikipedia.org/wiki/List_of_online_databases</a></li></ol></p> </div>
	resource: Data Visualization [/bjc-r/cur/programming/5-algorithms/5-data-processing/1-data-visualization.html]
	resource: Working With Large Data Sets [/bjc-r/cur/programming/5-algorithms/5-data-processing/2-large-data-sets.html]

 	 
heading: Social Implications Lab 7: Copyrights and Patents
	 resource: Copyright or Patent? [/bjc-r/cur/programming/5-algorithms/7-copyrights-and-patents/1-copyright.html]
	 quiz: Strokes of Genius? [/bjc-r/cur/programming/5-algorithms/7-copyrights-and-patents/2-gray.html]
	 resource: How Inventions Happen [/bjc-r/cur/programming/5-algorithms/7-copyrights-and-patents/3-inventions.html]
	 resource: Software Patents [/bjc-r/cur/programming/5-algorithms/7-copyrights-and-patents/4-software.html]
	 resource: Copyright [/bjc-r/cur/programming/5-algorithms/7-copyrights-and-patents/5-copyright.html]
	 resource: Fair Use [/bjc-r/cur/programming/5-algorithms/7-copyrights-and-patents/6-fairuse.html]
	 resource: The Social Bargain [/bjc-r/cur/programming/5-algorithms/7-copyrights-and-patents/7-bargain.html]
	 resource: Copyrights and Computers [/bjc-r/cur/programming/5-algorithms/7-copyrights-and-patents/8-digital.html]
