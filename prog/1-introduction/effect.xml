<blocks app="Snap! 4.0, http://snap.berkeley.edu" version="1"><block-definition s="%&apos;which&apos; effect" type="reporter" category="looks"><header></header><code></code><inputs><input type="%s" readonly="true"><options>color
fisheye
whirl
pixelate
mosaic
duplicate
negative
comic
confetti
saturation
brightness
ghost</options></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>query</l></list><l>    var thisObj = this,&#xD;        neighborhood,&#xD;        stage,&#xD;        objName;&#xD;&#xD;    if (thisObj) {&#xD;        switch (query) {&#xD;        case &apos;self&apos; :&#xD;            return thisObj;&#xD;        case &apos;other sprites&apos;:&#xD;            stage = thisObj.parentThatIsA(StageMorph);&#xD;            return new List(&#xD;                stage.children.filter(function (each) {&#xD;                    return each instanceof SpriteMorph &amp;&amp;&#xD;                        each !== thisObj;&#xD;                })&#xD;            );&#xD;        case &apos;parts&apos;:&#xD;            return new List(thisObj.parts || []);&#xD;        case &apos;anchor&apos;:&#xD;            return thisObj.anchor || &apos;&apos;;&#xD;        case &apos;parent&apos;:&#xD;            return thisObj.exemplar || &apos;&apos;;&#xD;        case &apos;children&apos;:&#xD;            return new List(thisObj.specimens ? thisObj.specimens() : []);&#xD;        case &apos;siblings&apos;:&#xD;            if (!(thisObj.exemplar)) return new List();&#xD;            return new List(thisObj.exemplar.specimens().filter(&#xD;                function (sib) {return sib !== thisObj;}&#xD;            ));&#xD;        case &apos;clone?&apos;:&#xD;            return thisObj.isClone;&#xD;        case &apos;clones&apos;:&#xD;            stage = thisObj.parentThatIsA(StageMorph);&#xD;            objName = thisObj.name || thisObj.cloneOriginName;&#xD;            return new List(&#xD;                stage.children.filter(function (each) {&#xD;                    return each.isClone &amp;&amp;&#xD;                        (each !== thisObj) &amp;&amp;&#xD;                        (each.cloneOriginName === objName);&#xD;                })&#xD;            );&#xD;        case &apos;other clones&apos;:&#xD;            return thisObj.isClone ? this.reportGet([&apos;clones&apos;]) : new List();&#xD;        case &apos;neighbors&apos;:&#xD;            stage = thisObj.parentThatIsA(StageMorph);&#xD;            neighborhood = thisObj.bounds.expandBy(new Point(&#xD;                thisObj.width(),&#xD;                thisObj.height()&#xD;            ));&#xD;            return new List(&#xD;                stage.children.filter(function (each) {&#xD;                    return each instanceof SpriteMorph &amp;&amp;&#xD;                        (each !== thisObj) &amp;&amp;&#xD;                        each.bounds.intersects(neighborhood);&#xD;                })&#xD;            );&#xD;        case &apos;dangling?&apos;:&#xD;            return !thisObj.rotatesWithAnchor;&#xD;        case &apos;rotation x&apos;:&#xD;            return thisObj.xPosition();&#xD;        case &apos;rotation y&apos;:&#xD;            return thisObj.yPosition();&#xD;        case &apos;midpoint x&apos;:&#xD;            return thisObj.xCenter();&#xD;        case &apos;midpoint y&apos;:&#xD;            return thisObj.yCenter();&#xD;        case &apos;direction&apos;:&#xD;            return thisObj.direction();&#xD;        case &apos;name&apos;:&#xD;            return thisObj.name;&#xD;        case &apos;stage&apos;:&#xD;            return thisObj.parentThatIsA(StageMorph);&#xD;        case &apos;shown?&apos;:&#xD;            return thisObj.isVisible;&#xD;        case &apos;draggable?&apos;:&#xD;            return thisObj.isDraggable;&#xD;        case &apos;rotation mode&apos;:&#xD;            return [&apos;none&apos;,&apos;rotate&apos;,&apos;left-right&apos;][thisObj.rotationStyle];&#xD;        case &apos;costume&apos;:&#xD;            return thisObj.costume;&#xD;        case &apos;costume name&apos;:&#xD;            return (thisObj.costume ? thisObj.costume.name: &apos;turtle&apos;);&#xD;        case &apos;costume #&apos;:&#xD;            return thisObj.getCostumeIdx();&#xD;        case &apos;wardrobe&apos;:&#xD;            return thisObj.costumes;&#xD;        case &apos;color&apos;:&#xD;            return thisObj.graphicsValues.color || 0;&#xD;        case &apos;fisheye&apos;:&#xD;            return thisObj.graphicsValues.fisheye || 0;&#xD;        case &apos;whirl&apos;:&#xD;            return thisObj.graphicsValues.whirl || 0;&#xD;        case &apos;pixelate&apos;:&#xD;            return thisObj.graphicsValues.pixelate || 0;&#xD;        case &apos;mosaic&apos;:&#xD;            return thisObj.graphicsValues.mosaic || 0;&#xD;        case &apos;duplicate&apos;:&#xD;            return thisObj.graphicsValues.duplicate || 0;&#xD;        case &apos;negative&apos;:&#xD;            return thisObj.graphicsValues.negative || 0;&#xD;        case &apos;comic&apos;:&#xD;            return thisObj.graphicsValues.comic || 0;&#xD;        case &apos;confetti&apos;:&#xD;            return thisObj.graphicsValues.confetti || 0;&#xD;        case &apos;saturation&apos;:&#xD;            return thisObj.graphicsValues.saturation || 0;&#xD;        case &apos;brightness&apos;:&#xD;            return thisObj.graphicsValues.brightness || 0;&#xD;        case &apos;ghost&apos;:&#xD;            return thisObj.getGhostEffect() || 0;&#xD;        case &apos;size&apos;:&#xD;            return thisObj.scale*100;&#xD;        case &apos;layer&apos;:&#xD;            return thisObj.parent.children.indexOf(thisObj);&#xD;        case &apos;saying&apos;:&#xD;            var bubble = this.talkBubble();&#xD;            if (bubble &amp;&amp; !bubble.isThought) {&#xD;                return bubble.data;&#xD;            } else return &apos;&apos;;&#xD;        case &apos;thinking&apos;:&#xD;            var bubble = this.talkBubble();&#xD;            if (bubble &amp;&amp; bubble.isThought) {&#xD;                return bubble.data;&#xD;            } else return &apos;&apos;;&#xD;        case &apos;jukebox&apos;:&#xD;            return thisObj.sounds;&#xD;        case &apos;tempo&apos;:&#xD;            return thisObj.getTempo();&#xD;        case &apos;down?&apos;:&#xD;            return thisObj.isDown;&#xD;        case &apos;pencolor&apos;:&#xD;            return new ColorSlotMorph(thisObj.color);&#xD;        case &apos;RGB&apos;:&#xD;            return new List([thisObj.color.r, thisObj.color.g, thisObj.color.b]);&#xD;        case &apos;HSV&apos;:&#xD;            return new List(thisObj.color.hsv());&#xD;        case &apos;color #&apos;:&#xD;            return thisObj.getHue();&#xD;        case &apos;shade&apos;:&#xD;            return thisObj.getBrightness();&#xD;        case &apos;pen size&apos;:&#xD;            return thisObj.size;&#xD;    }&#xD;    return query;&#xD;};</l></block><list><block var="which"/></list></block></block></script></block-definition></blocks>